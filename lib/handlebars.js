/*!
 * Copyright (c) 2021-2022 Digital Bazaar, Inc. All rights reserved.
 */
'use strict';

import Handlebars from 'handlebars';
import {statusMarks} from './statusMarks.js';
import {formatJSON} from './files.js';

// helpersFile is a path to a project specific helpers file.
const registerHelpers = helpersFile => {
  Handlebars.registerHelper('getStatusMark',
    state => statusMarks[state] || statusMarks.pending);

  Handlebars.registerHelper('formatJSON', data => formatJSON({data}));

  Handlebars.registerHelper(
    'getOptional', optional => optional ? 'optional' : 'not-optional');
  try {
    if(!helpersFile) {
      return;
    }
    // We can require additional helpers from a file
    const additionalHelpers = require(helpersFile);
    // the helpers file should export an object with object<string, Function>
    for(const helperName in additionalHelpers) {
      const helperMethod = additionalHelpers[helperName];
      Handlebars.registerHelper(helperName, helperMethod);
    }
  } catch(e) {
    console.error(`FAILED TO LOAD HELPERS FILE ${helpersFile}`, e);
  }
};

export const makeTemplate = testConfig => {
  registerHelpers(testConfig.helpers);
  const template = Handlebars.template;
  const templates = Handlebars.templates = Handlebars.templates || {};
  //this code was autogenerated by handlebars
  templates['report-template.hbs'] = template(
    {
      compiler: [7, '>= 4.0.0'],
      main: function(container, depth0, helpers, partials, data) {
        let stack1;
        return '<!DOCTYPE html>\n<html>\n  <head>\n' +
      ((stack1 = container.invokePartial(
        partials['head.hbs'], depth0, {
          name: 'head.hbs',
          data,
          indent: '    ',
          helpers,
          partials,
          decorators: container.decorators
        })) != null ? stack1 : '') +
      '  </head>\n  <body>\n' +
      ((stack1 = container.invokePartial(
        partials['body.hbs'], depth0, {
          name: 'body.hbs',
          data,
          indent: '    ',
          helpers,
          partials,
          decorators: container.decorators
        })) != null ? stack1 : '') +
      ((stack1 = container.invokePartial(
        partials['metrics.hbs'], depth0, {
          name: 'metrics.hbs',
          data,
          indent: '    ',
          helpers,
          partials,
          decorators: container.decorators
        })) != null ? stack1 : '') +
      '  </body>\n</html>\n';
      }, usePartial: true, useData: true});
  return templates['report-template.hbs'];
};
