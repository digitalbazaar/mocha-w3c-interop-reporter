const Handlebars = require('handlebars');
const {passing, failed, pending} = require('./constants');

Handlebars.registerHelper('getStatusMark', state => {
  let statusMark = pending;
  if(state === 'passed') {
    statusMark = passing;
  }
  if(state === 'failed') {
    statusMark = failed;
  }
  return statusMark;
});

Handlebars.registerHelper(
  'getOptional', optional => optional ? 'optional' : 'not-optional');

Handlebars.registerHelper(
  'getOptionalTitle',
  title => /optional/i.test(title) ? 'optional' : 'not-optional');

const template = Handlebars.template;
const templates = Handlebars.templates = Handlebars.templates || {};

const makeTemplate = () => {
  //this code was autogenerated by handlebars
  templates['report-template.hbs'] = template(
    {
      compiler: [7, '>= 4.0.0'],
      main: function(container, depth0, helpers, partials, data) {
        let stack1;
        return '<!DOCTYPE html>\n<html>\n  <head>\n' +
      ((stack1 = container.invokePartial(
        partials['head.hbs'], depth0, {name: 'head.hbs', data, indent: '    ', helpers, partials, decorators: container.decorators})) != null ? stack1 : '') +
      '  </head>\n  <body>\n' +
      ((stack1 = container.invokePartial(
        partials['body.hbs'], depth0, {name: 'implementation.hbs', data, indent: '    ', helpers, partials, decorators: container.decorators})) != null ? stack1 : '') +
      ((stack1 = container.invokePartial(partials['metrics.hbs'], depth0, {name: 'metrics.hbs', data, indent: '    ', helpers, partials, decorators: container.decorators})) != null ? stack1 : '') +
      '  </body>\n</html>\n';
  }, usePartial: true, useData: true});
}
module.exports = {makeTemplate};
