{
  "title": "",
  "ctx": null,
  "suites": [
    {
      "title": "Issue Credential - Data Integrity",
      "ctx": null,
      "suites": [
        {
          "title": "Danube Tech",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "MUST successfully issue a credential.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: name,\n          rowId: this.test.title\n        };\n        const body = createRequestBody({issuer});\n        const {result, data: issuedVc, error} = await issuer.issue({body});\n        should.exist(result, 'Expected result from issuer.');\n        should.exist(issuedVc, 'Expected result to have data.');\n        should.not.exist(error, 'Expected issuer to not Error.');\n        result.status.should.equal(201, 'Expected statusCode 201.');\n        testIssuedVc({issuedVc});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "parent": "45iymnRQuPi5LI2HPlHt3",
              "ctx": null,
              "_testId": "urn:uuid:7d556c3e-3a4a-48da-bb11-a357c4ddb7f9",
              "_events": {},
              "_eventsCount": 1,
              "link": "https://example.com/",
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "MUST successfully issue a credential."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 553,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 516,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Request body MUST have property \"credential\".",
              "body": "async function() {\n        this.test.cell = {\n          columnId: name,\n          rowId: this.test.title\n        };\n        const body = createRequestBody({issuer});\n        body.verifiableCredential = {...body.credential};\n        delete body.credential;\n        const {result, error} = await issuer.issue({body});\n        shouldThrowInvalidInput({result, error});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "parent": "45iymnRQuPi5LI2HPlHt3",
              "ctx": null,
              "_testId": "urn:uuid:b0a4506b-6afb-4715-90a0-710bd0b988fc",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "Request body MUST have property \"credential\"."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1069,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 380,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "credential MUST have property \"@context\".",
              "body": "async function() {\n        this.test.cell = {\n          columnId: name,\n          rowId: this.test.title\n        };\n        const body = createRequestBody({issuer});\n        delete body.credential['@context'];\n        const {result, error} = await issuer.issue({body});\n        shouldThrowInvalidInput({result, error});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "parent": "45iymnRQuPi5LI2HPlHt3",
              "ctx": null,
              "_testId": "urn:uuid:e6d4cb11-aabd-4604-962b-e3b926c4c2f9",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "credential MUST have property \"@context\"."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1452,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 375,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "credential \"@context\" MUST be an array.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: name,\n          rowId: this.test.title\n        };\n        const body = createRequestBody({issuer});\n        body.credential['@context'] = 4;\n        const {result, error} = await issuer.issue({body});\n        shouldThrowInvalidInput({result, error});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "parent": "45iymnRQuPi5LI2HPlHt3",
              "ctx": null,
              "_testId": "urn:uuid:c3751cd2-d249-4f6d-9106-2e97371661e9",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "credential \"@context\" MUST be an array."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1828,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 383,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "credential \"@context\" items MUST be strings.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: name,\n          rowId: this.test.title\n        };\n        const body = createRequestBody({issuer});\n        const invalidContextTypes = [{foo: true}, 4, false, null];\n        for(const invalidContextType of invalidContextTypes) {\n          body.credential['@context'] = invalidContextType;\n          const {result, error} = await issuer.issue({body: {...body}});\n          shouldThrowInvalidInput({result, error});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "parent": "45iymnRQuPi5LI2HPlHt3",
              "ctx": null,
              "_testId": "urn:uuid:8e980cf9-b997-4dfe-afc6-887707719a08",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "credential \"@context\" items MUST be strings."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 2212,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1490,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "credential MUST have property \"type\"",
              "body": "async function() {\n        this.test.cell = {\n          columnId: name,\n          rowId: this.test.title\n        };\n        const body = createRequestBody({issuer});\n        delete body.credential.type;\n        const {result, error} = await issuer.issue({body});\n        shouldThrowInvalidInput({result, error});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "parent": "45iymnRQuPi5LI2HPlHt3",
              "ctx": null,
              "_testId": "urn:uuid:1a9c26a9-f871-4f95-8f9e-e13a231e9c50",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "credential MUST have property \"type\""
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 3703,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 376,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "\"credential.type\" MUST be an array.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: name,\n          rowId: this.test.title\n        };\n        const body = createRequestBody({issuer});\n        body.credential.type = 4;\n        const {result, error} = await issuer.issue({body});\n        shouldThrowInvalidInput({result, error});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "parent": "45iymnRQuPi5LI2HPlHt3",
              "ctx": null,
              "_testId": "urn:uuid:1aa3aad5-3a99-4ad3-acc6-f451b42ea2a0",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "\"credential.type\" MUST be an array."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 4081,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 356,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "\"credential.type\" items MUST be strings",
              "body": "async function() {\n        this.test.cell = {\n          columnId: name,\n          rowId: this.test.title\n        };\n        const body = createRequestBody({issuer});\n        const invalidCredentialTypes = [null, true, 4, []];\n        for(const invalidCredentialType of invalidCredentialTypes) {\n          body.credential.type = invalidCredentialType;\n          const {result, error} = await issuer.issue({body: {...body}});\n          shouldThrowInvalidInput({result, error});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "parent": "45iymnRQuPi5LI2HPlHt3",
              "ctx": null,
              "_testId": "urn:uuid:1c96ffff-20d3-46ff-bcfd-da67b9ef4c80",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "\"credential.type\" items MUST be strings"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 4440,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1523,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "credential MUST have property \"issuer\"",
              "body": "async function() {\n        this.test.cell = {\n          columnId: name,\n          rowId: this.test.title\n        };\n        const body = createRequestBody({issuer});\n        delete body.credential.issuer;\n        const {result, error} = await issuer.issue({body});\n        shouldThrowInvalidInput({result, error});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "parent": "45iymnRQuPi5LI2HPlHt3",
              "ctx": null,
              "_testId": "urn:uuid:0c843466-4006-43fd-8d09-da6192355e07",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "credential MUST have property \"issuer\""
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 5964,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 385,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "\"credential.issuer\" MUST be a string or an object",
              "body": "async function() {\n        this.test.cell = {\n          columnId: name,\n          rowId: this.test.title\n        };\n        const body = createRequestBody({issuer});\n        const invalidIssuerTypes = [null, true, 4, []];\n        for(const invalidIssuerType of invalidIssuerTypes) {\n          body.credential.issuer = invalidIssuerType;\n          const {result, error} = await issuer.issue({body: {...body}});\n          shouldThrowInvalidInput({result, error});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "parent": "45iymnRQuPi5LI2HPlHt3",
              "ctx": null,
              "_testId": "urn:uuid:07f5ac26-f344-45bc-bb6c-608f990430d0",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "\"credential.issuer\" MUST be a string or an object"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 6349,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 724,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected status code 400 invalid input!: expected 500 to equal 400",
                "showDiff": true,
                "actual": "500",
                "expected": "400",
                "operator": "strictEqual",
                "stack": "AssertionError: Expected status code 400 invalid input!: expected 500 to equal 400\n    at shouldThrowInvalidInput (tests/assertions.js:16:23)\n    at Context.<anonymous> (tests/10-issuer.js:142:11)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)"
              }
            },
            {
              "type": "test",
              "title": "credential MUST have property \"credentialSubject\"",
              "body": "async function() {\n        this.test.cell = {\n          columnId: name,\n          rowId: this.test.title\n        };\n        const body = createRequestBody({issuer});\n        delete body.credential.credentialSubject;\n        const {result, error} = await issuer.issue({body});\n        shouldThrowInvalidInput({result, error});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "parent": "45iymnRQuPi5LI2HPlHt3",
              "ctx": null,
              "_testId": "urn:uuid:126b630a-c39f-4c5f-95ff-7050a5b815e5",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "credential MUST have property \"credentialSubject\""
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 7082,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 372,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "\"credential.credentialSubject\" MUST be an object",
              "body": "async function() {\n        this.test.cell = {\n          columnId: name,\n          rowId: this.test.title\n        };\n        const body = createRequestBody({issuer});\n        const invalidCredentialSubjectTypes = [null, true, 4, []];\n        for(const invalidCredentialSubjectType of\n          invalidCredentialSubjectTypes) {\n          body.credential.credentialSubject = invalidCredentialSubjectType;\n          const {result, error} = await issuer.issue({body: {...body}});\n          shouldThrowInvalidInput({result, error});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "parent": "45iymnRQuPi5LI2HPlHt3",
              "ctx": null,
              "_testId": "urn:uuid:9466a465-e7b9-4e54-9bd1-cbafd9546579",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "\"credential.credentialSubject\" MUST be an object"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 7455,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1470,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "credential MAY have property \"issuanceDate\"",
              "body": "async function() {\n        this.test.cell = {\n          columnId: name,\n          rowId: this.test.title\n        };\n        const body = createRequestBody({issuer});\n        body.credential.issuanceDate = new Date().toISOString()\n          .replace('.000Z', 'Z');\n        const {result, error} = await issuer.issue({body});\n        should.exist(result, 'Expected result from issuer.');\n        should.not.exist(error, 'Expected issuer to not Error.');\n        result.status.should.equal(201, 'Expected statusCode 201.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "parent": "45iymnRQuPi5LI2HPlHt3",
              "ctx": null,
              "_testId": "urn:uuid:aeef637e-2e7f-49cf-a9cb-eff433d838c5",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "credential MAY have property \"issuanceDate\""
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 8926,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 454,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "credential MAY have property \"expirationDate\"",
              "body": "async function() {\n        this.test.cell = {\n          columnId: name,\n          rowId: this.test.title\n        };\n        const body = createRequestBody({issuer});\n        // expires in a year\n        const oneYear = Date.now() + 365 * 24 * 60 * 60 * 1000;\n        body.credential.expirationDate = new Date(oneYear).toISOString()\n          .replace('.000Z', 'Z');\n        const {result, error} = await issuer.issue({body});\n        should.exist(result, 'Expected result from issuer.');\n        should.not.exist(error, 'Expected issuer to not Error.');\n        result.status.should.equal(201, 'Expected statusCode 201.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "parent": "45iymnRQuPi5LI2HPlHt3",
              "ctx": null,
              "_testId": "urn:uuid:534e361a-f1c1-44b4-bf37-115759d5d1ab",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "credential MAY have property \"expirationDate\""
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 9381,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 458,
              "state": "passed",
              "speed": "slow"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [],
          "_beforeAll": [],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "mFCXFvI-A8MDTOBp89KJG",
          "_testId": "urn:uuid:65d8a597-4930-4659-a961-4a4189228416"
        },
        {
          "title": "Digital Bazaar",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "MUST successfully issue a credential.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: name,\n          rowId: this.test.title\n        };\n        const body = createRequestBody({issuer});\n        const {result, data: issuedVc, error} = await issuer.issue({body});\n        should.exist(result, 'Expected result from issuer.');\n        should.exist(issuedVc, 'Expected result to have data.');\n        should.not.exist(error, 'Expected issuer to not Error.');\n        result.status.should.equal(201, 'Expected statusCode 201.');\n        testIssuedVc({issuedVc});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "parent": "Oi-4ObsyocDgyzVflLdzW",
              "ctx": null,
              "_testId": "urn:uuid:ac8ba57f-1e9a-4a6d-87a1-37b7e6731428",
              "_events": {},
              "_eventsCount": 1,
              "link": "https://example.com/",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "MUST successfully issue a credential."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 9840,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 230,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Request body MUST have property \"credential\".",
              "body": "async function() {\n        this.test.cell = {\n          columnId: name,\n          rowId: this.test.title\n        };\n        const body = createRequestBody({issuer});\n        body.verifiableCredential = {...body.credential};\n        delete body.credential;\n        const {result, error} = await issuer.issue({body});\n        shouldThrowInvalidInput({result, error});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "parent": "Oi-4ObsyocDgyzVflLdzW",
              "ctx": null,
              "_testId": "urn:uuid:aa1b46c2-a0d8-4653-83f5-52c8901cb3ff",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "Request body MUST have property \"credential\"."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 10071,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 103,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "credential MUST have property \"@context\".",
              "body": "async function() {\n        this.test.cell = {\n          columnId: name,\n          rowId: this.test.title\n        };\n        const body = createRequestBody({issuer});\n        delete body.credential['@context'];\n        const {result, error} = await issuer.issue({body});\n        shouldThrowInvalidInput({result, error});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "parent": "Oi-4ObsyocDgyzVflLdzW",
              "ctx": null,
              "_testId": "urn:uuid:e709c0b7-0f6f-4c0b-a858-ad9bc784c30c",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "credential MUST have property \"@context\"."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 10175,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 101,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "credential \"@context\" MUST be an array.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: name,\n          rowId: this.test.title\n        };\n        const body = createRequestBody({issuer});\n        body.credential['@context'] = 4;\n        const {result, error} = await issuer.issue({body});\n        shouldThrowInvalidInput({result, error});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "parent": "Oi-4ObsyocDgyzVflLdzW",
              "ctx": null,
              "_testId": "urn:uuid:a143cabc-f882-47da-9800-c31b51217a41",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "credential \"@context\" MUST be an array."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 10277,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 114,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "credential \"@context\" items MUST be strings.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: name,\n          rowId: this.test.title\n        };\n        const body = createRequestBody({issuer});\n        const invalidContextTypes = [{foo: true}, 4, false, null];\n        for(const invalidContextType of invalidContextTypes) {\n          body.credential['@context'] = invalidContextType;\n          const {result, error} = await issuer.issue({body: {...body}});\n          shouldThrowInvalidInput({result, error});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "parent": "Oi-4ObsyocDgyzVflLdzW",
              "ctx": null,
              "_testId": "urn:uuid:167b74d1-015a-4492-9c5f-8b2721c65421",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "credential \"@context\" items MUST be strings."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 10391,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 402,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "credential MUST have property \"type\"",
              "body": "async function() {\n        this.test.cell = {\n          columnId: name,\n          rowId: this.test.title\n        };\n        const body = createRequestBody({issuer});\n        delete body.credential.type;\n        const {result, error} = await issuer.issue({body});\n        shouldThrowInvalidInput({result, error});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "parent": "Oi-4ObsyocDgyzVflLdzW",
              "ctx": null,
              "_testId": "urn:uuid:ec3d97dd-0c7e-46f4-b97e-c0f4a7792d1c",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "credential MUST have property \"type\""
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 10793,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 88,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected status code 400 invalid input!: expected 500 to equal 400",
                "showDiff": true,
                "actual": "500",
                "expected": "400",
                "operator": "strictEqual",
                "stack": "AssertionError: Expected status code 400 invalid input!: expected 500 to equal 400\n    at shouldThrowInvalidInput (tests/assertions.js:16:23)\n    at Context.<anonymous> (tests/10-issuer.js:97:9)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)"
              }
            },
            {
              "type": "test",
              "title": "\"credential.type\" MUST be an array.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: name,\n          rowId: this.test.title\n        };\n        const body = createRequestBody({issuer});\n        body.credential.type = 4;\n        const {result, error} = await issuer.issue({body});\n        shouldThrowInvalidInput({result, error});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "parent": "Oi-4ObsyocDgyzVflLdzW",
              "ctx": null,
              "_testId": "urn:uuid:939eac5d-a2b9-4aac-8d19-3b4bbe28ea9d",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "\"credential.type\" MUST be an array."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 10884,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 94,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected status code 400 invalid input!: expected 500 to equal 400",
                "showDiff": true,
                "actual": "500",
                "expected": "400",
                "operator": "strictEqual",
                "stack": "AssertionError: Expected status code 400 invalid input!: expected 500 to equal 400\n    at shouldThrowInvalidInput (tests/assertions.js:16:23)\n    at Context.<anonymous> (tests/10-issuer.js:107:9)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)"
              }
            },
            {
              "type": "test",
              "title": "\"credential.type\" items MUST be strings",
              "body": "async function() {\n        this.test.cell = {\n          columnId: name,\n          rowId: this.test.title\n        };\n        const body = createRequestBody({issuer});\n        const invalidCredentialTypes = [null, true, 4, []];\n        for(const invalidCredentialType of invalidCredentialTypes) {\n          body.credential.type = invalidCredentialType;\n          const {result, error} = await issuer.issue({body: {...body}});\n          shouldThrowInvalidInput({result, error});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "parent": "Oi-4ObsyocDgyzVflLdzW",
              "ctx": null,
              "_testId": "urn:uuid:befee3ab-0503-4bba-b3da-1135def1be7c",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "\"credential.type\" items MUST be strings"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 10981,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 97,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected status code 400 invalid input!: expected 500 to equal 400",
                "showDiff": true,
                "actual": "500",
                "expected": "400",
                "operator": "strictEqual",
                "stack": "AssertionError: Expected status code 400 invalid input!: expected 500 to equal 400\n    at shouldThrowInvalidInput (tests/assertions.js:16:23)\n    at Context.<anonymous> (tests/10-issuer.js:119:11)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)"
              }
            },
            {
              "type": "test",
              "title": "credential MUST have property \"issuer\"",
              "body": "async function() {\n        this.test.cell = {\n          columnId: name,\n          rowId: this.test.title\n        };\n        const body = createRequestBody({issuer});\n        delete body.credential.issuer;\n        const {result, error} = await issuer.issue({body});\n        shouldThrowInvalidInput({result, error});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "parent": "Oi-4ObsyocDgyzVflLdzW",
              "ctx": null,
              "_testId": "urn:uuid:a7fcf899-f79a-4f24-a280-89338ac3cf10",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "credential MUST have property \"issuer\""
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 11081,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 135,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected no result from issuer.: expected Response{ size: +0, data: { …(1) }, …(2) } to not exist",
                "showDiff": false,
                "actual": {
                  "size": 0,
                  "data": {
                    "verifiableCredential": {
                      "@context": [
                        "https://www.w3.org/2018/credentials/v1",
                        "https://w3id.org/security/suites/ed25519-2020/v1"
                      ],
                      "type": [
                        "VerifiableCredential"
                      ],
                      "credentialSubject": {
                        "id": "did:key:z6MkhTNL7i2etLerDK8Acz5t528giE5KA4p75T6ka1E1D74r"
                      },
                      "id": "urn:uuid:a8f0e464-d20d-4a58-aa50-c5155c95b30d",
                      "issuer": "did:key:z6MkkyNu8RUzvTMCkbw7HyNGPzuExz7VMbeoMtRuu9o4kGdw",
                      "issuanceDate": "2022-05-23T18:06:49Z",
                      "proof": {
                        "type": "Ed25519Signature2020",
                        "created": "2022-05-23T18:06:49Z",
                        "verificationMethod": "did:key:z6MkkyNu8RUzvTMCkbw7HyNGPzuExz7VMbeoMtRuu9o4kGdw#z6MkkyNu8RUzvTMCkbw7HyNGPzuExz7VMbeoMtRuu9o4kGdw",
                        "proofPurpose": "assertionMethod",
                        "proofValue": "z4gdyohH8bbRneB9xhfwXuPDoBMLBEEJ25PKvJH8x8ZJ427ATczZxnrMx2ZmMwVvSPYb6A2n2rCZd5qk3S9ubuY7J"
                      }
                    }
                  }
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected no result from issuer.: expected Response{ size: +0, data: { …(1) }, …(2) } to not exist\n    at Object.should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at shouldThrowInvalidInput (tests/assertions.js:11:14)\n    at Context.<anonymous> (tests/10-issuer.js:130:9)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)"
              }
            },
            {
              "type": "test",
              "title": "\"credential.issuer\" MUST be a string or an object",
              "body": "async function() {\n        this.test.cell = {\n          columnId: name,\n          rowId: this.test.title\n        };\n        const body = createRequestBody({issuer});\n        const invalidIssuerTypes = [null, true, 4, []];\n        for(const invalidIssuerType of invalidIssuerTypes) {\n          body.credential.issuer = invalidIssuerType;\n          const {result, error} = await issuer.issue({body: {...body}});\n          shouldThrowInvalidInput({result, error});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "parent": "Oi-4ObsyocDgyzVflLdzW",
              "ctx": null,
              "_testId": "urn:uuid:1328ae93-e51b-412b-80a7-38813391507c",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "\"credential.issuer\" MUST be a string or an object"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 11220,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 132,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected no result from issuer.: expected Response{ size: +0, data: { …(1) }, …(2) } to not exist",
                "showDiff": false,
                "actual": {
                  "size": 0,
                  "data": {
                    "verifiableCredential": {
                      "@context": [
                        "https://www.w3.org/2018/credentials/v1",
                        "https://w3id.org/security/suites/ed25519-2020/v1"
                      ],
                      "type": [
                        "VerifiableCredential"
                      ],
                      "credentialSubject": {
                        "id": "did:key:z6MkhTNL7i2etLerDK8Acz5t528giE5KA4p75T6ka1E1D74r"
                      },
                      "id": "urn:uuid:548424a4-a907-4726-a415-43771593fd21",
                      "issuer": {
                        "id": "did:key:z6MkkyNu8RUzvTMCkbw7HyNGPzuExz7VMbeoMtRuu9o4kGdw"
                      },
                      "issuanceDate": "2022-05-23T18:06:49Z",
                      "proof": {
                        "type": "Ed25519Signature2020",
                        "created": "2022-05-23T18:06:49Z",
                        "verificationMethod": "did:key:z6MkkyNu8RUzvTMCkbw7HyNGPzuExz7VMbeoMtRuu9o4kGdw#z6MkkyNu8RUzvTMCkbw7HyNGPzuExz7VMbeoMtRuu9o4kGdw",
                        "proofPurpose": "assertionMethod",
                        "proofValue": "zGpdRb7P8mwoanaJ8vHCx9QvfqC517zgy3yR6AyRpiajegRfz8uvfx5cfVPvCZZrDgUGWeiibpZH1uiG6eSRqPem"
                      }
                    }
                  }
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected no result from issuer.: expected Response{ size: +0, data: { …(1) }, …(2) } to not exist\n    at Object.should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at shouldThrowInvalidInput (tests/assertions.js:11:14)\n    at Context.<anonymous> (tests/10-issuer.js:142:11)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)"
              }
            },
            {
              "type": "test",
              "title": "credential MUST have property \"credentialSubject\"",
              "body": "async function() {\n        this.test.cell = {\n          columnId: name,\n          rowId: this.test.title\n        };\n        const body = createRequestBody({issuer});\n        delete body.credential.credentialSubject;\n        const {result, error} = await issuer.issue({body});\n        shouldThrowInvalidInput({result, error});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "parent": "Oi-4ObsyocDgyzVflLdzW",
              "ctx": null,
              "_testId": "urn:uuid:ca890a10-4f5f-4f48-9126-bd16946a4f6b",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "credential MUST have property \"credentialSubject\""
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 11356,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 101,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected status code 400 invalid input!: expected 500 to equal 400",
                "showDiff": true,
                "actual": "500",
                "expected": "400",
                "operator": "strictEqual",
                "stack": "AssertionError: Expected status code 400 invalid input!: expected 500 to equal 400\n    at shouldThrowInvalidInput (tests/assertions.js:16:23)\n    at Context.<anonymous> (tests/10-issuer.js:153:9)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)"
              }
            },
            {
              "type": "test",
              "title": "\"credential.credentialSubject\" MUST be an object",
              "body": "async function() {\n        this.test.cell = {\n          columnId: name,\n          rowId: this.test.title\n        };\n        const body = createRequestBody({issuer});\n        const invalidCredentialSubjectTypes = [null, true, 4, []];\n        for(const invalidCredentialSubjectType of\n          invalidCredentialSubjectTypes) {\n          body.credential.credentialSubject = invalidCredentialSubjectType;\n          const {result, error} = await issuer.issue({body: {...body}});\n          shouldThrowInvalidInput({result, error});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "parent": "Oi-4ObsyocDgyzVflLdzW",
              "ctx": null,
              "_testId": "urn:uuid:f479f61b-fa5a-4159-abfa-a8d7c0d28d05",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "\"credential.credentialSubject\" MUST be an object"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 11459,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 117,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected status code 400 invalid input!: expected 500 to equal 400",
                "showDiff": true,
                "actual": "500",
                "expected": "400",
                "operator": "strictEqual",
                "stack": "AssertionError: Expected status code 400 invalid input!: expected 500 to equal 400\n    at shouldThrowInvalidInput (tests/assertions.js:16:23)\n    at Context.<anonymous> (tests/10-issuer.js:166:11)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)"
              }
            },
            {
              "type": "test",
              "title": "credential MAY have property \"issuanceDate\"",
              "body": "async function() {\n        this.test.cell = {\n          columnId: name,\n          rowId: this.test.title\n        };\n        const body = createRequestBody({issuer});\n        body.credential.issuanceDate = new Date().toISOString()\n          .replace('.000Z', 'Z');\n        const {result, error} = await issuer.issue({body});\n        should.exist(result, 'Expected result from issuer.');\n        should.not.exist(error, 'Expected issuer to not Error.');\n        result.status.should.equal(201, 'Expected statusCode 201.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "parent": "Oi-4ObsyocDgyzVflLdzW",
              "ctx": null,
              "_testId": "urn:uuid:18c454b4-db18-48b3-ad4b-d42dd182f7a6",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "credential MAY have property \"issuanceDate\""
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 11578,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 132,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "credential MAY have property \"expirationDate\"",
              "body": "async function() {\n        this.test.cell = {\n          columnId: name,\n          rowId: this.test.title\n        };\n        const body = createRequestBody({issuer});\n        // expires in a year\n        const oneYear = Date.now() + 365 * 24 * 60 * 60 * 1000;\n        body.credential.expirationDate = new Date(oneYear).toISOString()\n          .replace('.000Z', 'Z');\n        const {result, error} = await issuer.issue({body});\n        should.exist(result, 'Expected result from issuer.');\n        should.not.exist(error, 'Expected issuer to not Error.');\n        result.status.should.equal(201, 'Expected statusCode 201.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "parent": "Oi-4ObsyocDgyzVflLdzW",
              "ctx": null,
              "_testId": "urn:uuid:2bab1950-6183-4f9e-bd23-03b3263f48db",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "credential MAY have property \"expirationDate\""
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 11711,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 128,
              "state": "passed",
              "speed": "slow"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [],
          "_beforeAll": [],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "mFCXFvI-A8MDTOBp89KJG",
          "_testId": "urn:uuid:744dba79-451b-4b21-8992-efdb48afee10"
        },
        {
          "title": "SecureKey",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "MUST successfully issue a credential.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: name,\n          rowId: this.test.title\n        };\n        const body = createRequestBody({issuer});\n        const {result, data: issuedVc, error} = await issuer.issue({body});\n        should.exist(result, 'Expected result from issuer.');\n        should.exist(issuedVc, 'Expected result to have data.');\n        should.not.exist(error, 'Expected issuer to not Error.');\n        result.status.should.equal(201, 'Expected statusCode 201.');\n        testIssuedVc({issuedVc});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "parent": "91AvPgf3LfUxgt4HBscYI",
              "ctx": null,
              "_testId": "urn:uuid:59b50b61-bece-4e8b-a8ed-5f0c5e1f9a02",
              "_events": {},
              "_eventsCount": 1,
              "link": "https://example.com/",
              "cell": {
                "columnId": "SecureKey",
                "rowId": "MUST successfully issue a credential."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 11843,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 122,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected result from issuer.: expected undefined to exist",
                "showDiff": false,
                "operator": "strictEqual",
                "stack": "AssertionError: Expected result from issuer.: expected undefined to exist\n    at Object.should.exist (node_modules/chai/lib/chai/interface/should.js:144:34)\n    at Context.<anonymous> (tests/10-issuer.js:39:16)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)"
              }
            },
            {
              "type": "test",
              "title": "Request body MUST have property \"credential\".",
              "body": "async function() {\n        this.test.cell = {\n          columnId: name,\n          rowId: this.test.title\n        };\n        const body = createRequestBody({issuer});\n        body.verifiableCredential = {...body.credential};\n        delete body.credential;\n        const {result, error} = await issuer.issue({body});\n        shouldThrowInvalidInput({result, error});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "parent": "91AvPgf3LfUxgt4HBscYI",
              "ctx": null,
              "_testId": "urn:uuid:4852e9d8-74e3-4af2-a97a-aef2c3dab4a6",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SecureKey",
                "rowId": "Request body MUST have property \"credential\"."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 11964,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 91,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "credential MUST have property \"@context\".",
              "body": "async function() {\n        this.test.cell = {\n          columnId: name,\n          rowId: this.test.title\n        };\n        const body = createRequestBody({issuer});\n        delete body.credential['@context'];\n        const {result, error} = await issuer.issue({body});\n        shouldThrowInvalidInput({result, error});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "parent": "91AvPgf3LfUxgt4HBscYI",
              "ctx": null,
              "_testId": "urn:uuid:be23d6aa-6439-4e1f-aea3-73a2790f7c94",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SecureKey",
                "rowId": "credential MUST have property \"@context\"."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 12056,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 93,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "credential \"@context\" MUST be an array.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: name,\n          rowId: this.test.title\n        };\n        const body = createRequestBody({issuer});\n        body.credential['@context'] = 4;\n        const {result, error} = await issuer.issue({body});\n        shouldThrowInvalidInput({result, error});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "parent": "91AvPgf3LfUxgt4HBscYI",
              "ctx": null,
              "_testId": "urn:uuid:65ef9e4a-2c34-4f4e-80a7-73de11d23bc1",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SecureKey",
                "rowId": "credential \"@context\" MUST be an array."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 12151,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 93,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "credential \"@context\" items MUST be strings.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: name,\n          rowId: this.test.title\n        };\n        const body = createRequestBody({issuer});\n        const invalidContextTypes = [{foo: true}, 4, false, null];\n        for(const invalidContextType of invalidContextTypes) {\n          body.credential['@context'] = invalidContextType;\n          const {result, error} = await issuer.issue({body: {...body}});\n          shouldThrowInvalidInput({result, error});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "parent": "91AvPgf3LfUxgt4HBscYI",
              "ctx": null,
              "_testId": "urn:uuid:f68f9d53-bc41-4f79-9fd2-0eb7e9e3e892",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SecureKey",
                "rowId": "credential \"@context\" items MUST be strings."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 12245,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 371,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "credential MUST have property \"type\"",
              "body": "async function() {\n        this.test.cell = {\n          columnId: name,\n          rowId: this.test.title\n        };\n        const body = createRequestBody({issuer});\n        delete body.credential.type;\n        const {result, error} = await issuer.issue({body});\n        shouldThrowInvalidInput({result, error});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "parent": "91AvPgf3LfUxgt4HBscYI",
              "ctx": null,
              "_testId": "urn:uuid:410f12c0-0375-44b2-a289-4eb19eb5331c",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SecureKey",
                "rowId": "credential MUST have property \"type\""
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 12618,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 92,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "\"credential.type\" MUST be an array.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: name,\n          rowId: this.test.title\n        };\n        const body = createRequestBody({issuer});\n        body.credential.type = 4;\n        const {result, error} = await issuer.issue({body});\n        shouldThrowInvalidInput({result, error});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "parent": "91AvPgf3LfUxgt4HBscYI",
              "ctx": null,
              "_testId": "urn:uuid:45e16d86-9be4-4957-909c-f0f065ba0a2a",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SecureKey",
                "rowId": "\"credential.type\" MUST be an array."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 12711,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 97,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "\"credential.type\" items MUST be strings",
              "body": "async function() {\n        this.test.cell = {\n          columnId: name,\n          rowId: this.test.title\n        };\n        const body = createRequestBody({issuer});\n        const invalidCredentialTypes = [null, true, 4, []];\n        for(const invalidCredentialType of invalidCredentialTypes) {\n          body.credential.type = invalidCredentialType;\n          const {result, error} = await issuer.issue({body: {...body}});\n          shouldThrowInvalidInput({result, error});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "parent": "91AvPgf3LfUxgt4HBscYI",
              "ctx": null,
              "_testId": "urn:uuid:ee3b9f8b-0b5f-4f7d-9695-772b200b922d",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SecureKey",
                "rowId": "\"credential.type\" items MUST be strings"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 12810,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 372,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "credential MUST have property \"issuer\"",
              "body": "async function() {\n        this.test.cell = {\n          columnId: name,\n          rowId: this.test.title\n        };\n        const body = createRequestBody({issuer});\n        delete body.credential.issuer;\n        const {result, error} = await issuer.issue({body});\n        shouldThrowInvalidInput({result, error});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "parent": "91AvPgf3LfUxgt4HBscYI",
              "ctx": null,
              "_testId": "urn:uuid:b6cdc865-df87-4402-94e5-39bb27e438ea",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SecureKey",
                "rowId": "credential MUST have property \"issuer\""
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 13182,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 100,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "\"credential.issuer\" MUST be a string or an object",
              "body": "async function() {\n        this.test.cell = {\n          columnId: name,\n          rowId: this.test.title\n        };\n        const body = createRequestBody({issuer});\n        const invalidIssuerTypes = [null, true, 4, []];\n        for(const invalidIssuerType of invalidIssuerTypes) {\n          body.credential.issuer = invalidIssuerType;\n          const {result, error} = await issuer.issue({body: {...body}});\n          shouldThrowInvalidInput({result, error});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "parent": "91AvPgf3LfUxgt4HBscYI",
              "ctx": null,
              "_testId": "urn:uuid:39a8984d-eed5-4c32-8248-5884c8f020ba",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SecureKey",
                "rowId": "\"credential.issuer\" MUST be a string or an object"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 13283,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 378,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "credential MUST have property \"credentialSubject\"",
              "body": "async function() {\n        this.test.cell = {\n          columnId: name,\n          rowId: this.test.title\n        };\n        const body = createRequestBody({issuer});\n        delete body.credential.credentialSubject;\n        const {result, error} = await issuer.issue({body});\n        shouldThrowInvalidInput({result, error});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "parent": "91AvPgf3LfUxgt4HBscYI",
              "ctx": null,
              "_testId": "urn:uuid:2b612e97-4e8b-48c2-87bb-8018fd3c43e5",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SecureKey",
                "rowId": "credential MUST have property \"credentialSubject\""
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 13662,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 96,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "\"credential.credentialSubject\" MUST be an object",
              "body": "async function() {\n        this.test.cell = {\n          columnId: name,\n          rowId: this.test.title\n        };\n        const body = createRequestBody({issuer});\n        const invalidCredentialSubjectTypes = [null, true, 4, []];\n        for(const invalidCredentialSubjectType of\n          invalidCredentialSubjectTypes) {\n          body.credential.credentialSubject = invalidCredentialSubjectType;\n          const {result, error} = await issuer.issue({body: {...body}});\n          shouldThrowInvalidInput({result, error});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "parent": "91AvPgf3LfUxgt4HBscYI",
              "ctx": null,
              "_testId": "urn:uuid:9761cf8a-581e-48b4-911a-b0bc19d63433",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SecureKey",
                "rowId": "\"credential.credentialSubject\" MUST be an object"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 13760,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 377,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "credential MAY have property \"issuanceDate\"",
              "body": "async function() {\n        this.test.cell = {\n          columnId: name,\n          rowId: this.test.title\n        };\n        const body = createRequestBody({issuer});\n        body.credential.issuanceDate = new Date().toISOString()\n          .replace('.000Z', 'Z');\n        const {result, error} = await issuer.issue({body});\n        should.exist(result, 'Expected result from issuer.');\n        should.not.exist(error, 'Expected issuer to not Error.');\n        result.status.should.equal(201, 'Expected statusCode 201.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "parent": "91AvPgf3LfUxgt4HBscYI",
              "ctx": null,
              "_testId": "urn:uuid:0b1e9303-1dfe-4c96-a50c-624fdb9074f1",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SecureKey",
                "rowId": "credential MAY have property \"issuanceDate\""
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 14139,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 101,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "credential MAY have property \"expirationDate\"",
              "body": "async function() {\n        this.test.cell = {\n          columnId: name,\n          rowId: this.test.title\n        };\n        const body = createRequestBody({issuer});\n        // expires in a year\n        const oneYear = Date.now() + 365 * 24 * 60 * 60 * 1000;\n        body.credential.expirationDate = new Date(oneYear).toISOString()\n          .replace('.000Z', 'Z');\n        const {result, error} = await issuer.issue({body});\n        should.exist(result, 'Expected result from issuer.');\n        should.not.exist(error, 'Expected issuer to not Error.');\n        result.status.should.equal(201, 'Expected statusCode 201.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "parent": "91AvPgf3LfUxgt4HBscYI",
              "ctx": null,
              "_testId": "urn:uuid:bd65ee1f-2ea9-471e-bae5-39f60cbebb13",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SecureKey",
                "rowId": "credential MAY have property \"expirationDate\""
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 14242,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 90,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected result from issuer.: expected undefined to exist",
                "showDiff": false,
                "operator": "strictEqual",
                "stack": "AssertionError: Expected result from issuer.: expected undefined to exist\n    at Object.should.exist (node_modules/chai/lib/chai/interface/should.js:144:34)\n    at Context.<anonymous> (tests/10-issuer.js:193:16)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)"
              }
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [],
          "_beforeAll": [],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "mFCXFvI-A8MDTOBp89KJG",
          "_testId": "urn:uuid:6b3e2960-5655-4fb2-b318-975b59947ea9"
        }
      ],
      "tests": [
        {
          "type": "test",
          "title": "MUST successfully issue a credential.",
          "body": "async function() {\n        this.test.cell = {\n          columnId: name,\n          rowId: this.test.title\n        };\n        const body = createRequestBody({issuer});\n        const {result, data: issuedVc, error} = await issuer.issue({body});\n        should.exist(result, 'Expected result from issuer.');\n        should.exist(issuedVc, 'Expected result to have data.');\n        should.not.exist(error, 'Expected issuer to not Error.');\n        result.status.should.equal(201, 'Expected statusCode 201.');\n        testIssuedVc({issuedVc});\n      }",
          "async": 0,
          "sync": true,
          "_timeout": 15000,
          "_slow": 75,
          "_retries": -1,
          "timedOut": false,
          "_currentRetry": 0,
          "pending": false,
          "parent": "45iymnRQuPi5LI2HPlHt3",
          "ctx": null,
          "_testId": "urn:uuid:7d556c3e-3a4a-48da-bb11-a357c4ddb7f9",
          "_events": {},
          "_eventsCount": 1,
          "link": "https://example.com/",
          "cell": {
            "columnId": "Danube Tech",
            "rowId": "MUST successfully issue a credential."
          },
          "timer": {
            "_idleTimeout": -1,
            "_idlePrev": null,
            "_idleNext": null,
            "_idleStart": 553,
            "_onTimeout": null,
            "_repeat": null,
            "_destroyed": true
          },
          "duration": 516,
          "state": "passed",
          "speed": "slow"
        },
        {
          "type": "test",
          "title": "Request body MUST have property \"credential\".",
          "body": "async function() {\n        this.test.cell = {\n          columnId: name,\n          rowId: this.test.title\n        };\n        const body = createRequestBody({issuer});\n        body.verifiableCredential = {...body.credential};\n        delete body.credential;\n        const {result, error} = await issuer.issue({body});\n        shouldThrowInvalidInput({result, error});\n      }",
          "async": 0,
          "sync": true,
          "_timeout": 15000,
          "_slow": 75,
          "_retries": -1,
          "timedOut": false,
          "_currentRetry": 0,
          "pending": false,
          "parent": "45iymnRQuPi5LI2HPlHt3",
          "ctx": null,
          "_testId": "urn:uuid:b0a4506b-6afb-4715-90a0-710bd0b988fc",
          "_events": {},
          "_eventsCount": 1,
          "cell": {
            "columnId": "Danube Tech",
            "rowId": "Request body MUST have property \"credential\"."
          },
          "timer": {
            "_idleTimeout": -1,
            "_idlePrev": null,
            "_idleNext": null,
            "_idleStart": 1069,
            "_onTimeout": null,
            "_repeat": null,
            "_destroyed": true
          },
          "duration": 380,
          "state": "passed",
          "speed": "slow"
        },
        {
          "type": "test",
          "title": "credential MUST have property \"@context\".",
          "body": "async function() {\n        this.test.cell = {\n          columnId: name,\n          rowId: this.test.title\n        };\n        const body = createRequestBody({issuer});\n        delete body.credential['@context'];\n        const {result, error} = await issuer.issue({body});\n        shouldThrowInvalidInput({result, error});\n      }",
          "async": 0,
          "sync": true,
          "_timeout": 15000,
          "_slow": 75,
          "_retries": -1,
          "timedOut": false,
          "_currentRetry": 0,
          "pending": false,
          "parent": "45iymnRQuPi5LI2HPlHt3",
          "ctx": null,
          "_testId": "urn:uuid:e6d4cb11-aabd-4604-962b-e3b926c4c2f9",
          "_events": {},
          "_eventsCount": 1,
          "cell": {
            "columnId": "Danube Tech",
            "rowId": "credential MUST have property \"@context\"."
          },
          "timer": {
            "_idleTimeout": -1,
            "_idlePrev": null,
            "_idleNext": null,
            "_idleStart": 1452,
            "_onTimeout": null,
            "_repeat": null,
            "_destroyed": true
          },
          "duration": 375,
          "state": "passed",
          "speed": "slow"
        },
        {
          "type": "test",
          "title": "credential \"@context\" MUST be an array.",
          "body": "async function() {\n        this.test.cell = {\n          columnId: name,\n          rowId: this.test.title\n        };\n        const body = createRequestBody({issuer});\n        body.credential['@context'] = 4;\n        const {result, error} = await issuer.issue({body});\n        shouldThrowInvalidInput({result, error});\n      }",
          "async": 0,
          "sync": true,
          "_timeout": 15000,
          "_slow": 75,
          "_retries": -1,
          "timedOut": false,
          "_currentRetry": 0,
          "pending": false,
          "parent": "45iymnRQuPi5LI2HPlHt3",
          "ctx": null,
          "_testId": "urn:uuid:c3751cd2-d249-4f6d-9106-2e97371661e9",
          "_events": {},
          "_eventsCount": 1,
          "cell": {
            "columnId": "Danube Tech",
            "rowId": "credential \"@context\" MUST be an array."
          },
          "timer": {
            "_idleTimeout": -1,
            "_idlePrev": null,
            "_idleNext": null,
            "_idleStart": 1828,
            "_onTimeout": null,
            "_repeat": null,
            "_destroyed": true
          },
          "duration": 383,
          "state": "passed",
          "speed": "slow"
        },
        {
          "type": "test",
          "title": "credential \"@context\" items MUST be strings.",
          "body": "async function() {\n        this.test.cell = {\n          columnId: name,\n          rowId: this.test.title\n        };\n        const body = createRequestBody({issuer});\n        const invalidContextTypes = [{foo: true}, 4, false, null];\n        for(const invalidContextType of invalidContextTypes) {\n          body.credential['@context'] = invalidContextType;\n          const {result, error} = await issuer.issue({body: {...body}});\n          shouldThrowInvalidInput({result, error});\n        }\n      }",
          "async": 0,
          "sync": true,
          "_timeout": 15000,
          "_slow": 75,
          "_retries": -1,
          "timedOut": false,
          "_currentRetry": 0,
          "pending": false,
          "parent": "45iymnRQuPi5LI2HPlHt3",
          "ctx": null,
          "_testId": "urn:uuid:8e980cf9-b997-4dfe-afc6-887707719a08",
          "_events": {},
          "_eventsCount": 1,
          "cell": {
            "columnId": "Danube Tech",
            "rowId": "credential \"@context\" items MUST be strings."
          },
          "timer": {
            "_idleTimeout": -1,
            "_idlePrev": null,
            "_idleNext": null,
            "_idleStart": 2212,
            "_onTimeout": null,
            "_repeat": null,
            "_destroyed": true
          },
          "duration": 1490,
          "state": "passed",
          "speed": "slow"
        },
        {
          "type": "test",
          "title": "credential MUST have property \"type\"",
          "body": "async function() {\n        this.test.cell = {\n          columnId: name,\n          rowId: this.test.title\n        };\n        const body = createRequestBody({issuer});\n        delete body.credential.type;\n        const {result, error} = await issuer.issue({body});\n        shouldThrowInvalidInput({result, error});\n      }",
          "async": 0,
          "sync": true,
          "_timeout": 15000,
          "_slow": 75,
          "_retries": -1,
          "timedOut": false,
          "_currentRetry": 0,
          "pending": false,
          "parent": "45iymnRQuPi5LI2HPlHt3",
          "ctx": null,
          "_testId": "urn:uuid:1a9c26a9-f871-4f95-8f9e-e13a231e9c50",
          "_events": {},
          "_eventsCount": 1,
          "cell": {
            "columnId": "Danube Tech",
            "rowId": "credential MUST have property \"type\""
          },
          "timer": {
            "_idleTimeout": -1,
            "_idlePrev": null,
            "_idleNext": null,
            "_idleStart": 3703,
            "_onTimeout": null,
            "_repeat": null,
            "_destroyed": true
          },
          "duration": 376,
          "state": "passed",
          "speed": "slow"
        },
        {
          "type": "test",
          "title": "\"credential.type\" MUST be an array.",
          "body": "async function() {\n        this.test.cell = {\n          columnId: name,\n          rowId: this.test.title\n        };\n        const body = createRequestBody({issuer});\n        body.credential.type = 4;\n        const {result, error} = await issuer.issue({body});\n        shouldThrowInvalidInput({result, error});\n      }",
          "async": 0,
          "sync": true,
          "_timeout": 15000,
          "_slow": 75,
          "_retries": -1,
          "timedOut": false,
          "_currentRetry": 0,
          "pending": false,
          "parent": "45iymnRQuPi5LI2HPlHt3",
          "ctx": null,
          "_testId": "urn:uuid:1aa3aad5-3a99-4ad3-acc6-f451b42ea2a0",
          "_events": {},
          "_eventsCount": 1,
          "cell": {
            "columnId": "Danube Tech",
            "rowId": "\"credential.type\" MUST be an array."
          },
          "timer": {
            "_idleTimeout": -1,
            "_idlePrev": null,
            "_idleNext": null,
            "_idleStart": 4081,
            "_onTimeout": null,
            "_repeat": null,
            "_destroyed": true
          },
          "duration": 356,
          "state": "passed",
          "speed": "slow"
        },
        {
          "type": "test",
          "title": "\"credential.type\" items MUST be strings",
          "body": "async function() {\n        this.test.cell = {\n          columnId: name,\n          rowId: this.test.title\n        };\n        const body = createRequestBody({issuer});\n        const invalidCredentialTypes = [null, true, 4, []];\n        for(const invalidCredentialType of invalidCredentialTypes) {\n          body.credential.type = invalidCredentialType;\n          const {result, error} = await issuer.issue({body: {...body}});\n          shouldThrowInvalidInput({result, error});\n        }\n      }",
          "async": 0,
          "sync": true,
          "_timeout": 15000,
          "_slow": 75,
          "_retries": -1,
          "timedOut": false,
          "_currentRetry": 0,
          "pending": false,
          "parent": "45iymnRQuPi5LI2HPlHt3",
          "ctx": null,
          "_testId": "urn:uuid:1c96ffff-20d3-46ff-bcfd-da67b9ef4c80",
          "_events": {},
          "_eventsCount": 1,
          "cell": {
            "columnId": "Danube Tech",
            "rowId": "\"credential.type\" items MUST be strings"
          },
          "timer": {
            "_idleTimeout": -1,
            "_idlePrev": null,
            "_idleNext": null,
            "_idleStart": 4440,
            "_onTimeout": null,
            "_repeat": null,
            "_destroyed": true
          },
          "duration": 1523,
          "state": "passed",
          "speed": "slow"
        },
        {
          "type": "test",
          "title": "credential MUST have property \"issuer\"",
          "body": "async function() {\n        this.test.cell = {\n          columnId: name,\n          rowId: this.test.title\n        };\n        const body = createRequestBody({issuer});\n        delete body.credential.issuer;\n        const {result, error} = await issuer.issue({body});\n        shouldThrowInvalidInput({result, error});\n      }",
          "async": 0,
          "sync": true,
          "_timeout": 15000,
          "_slow": 75,
          "_retries": -1,
          "timedOut": false,
          "_currentRetry": 0,
          "pending": false,
          "parent": "45iymnRQuPi5LI2HPlHt3",
          "ctx": null,
          "_testId": "urn:uuid:0c843466-4006-43fd-8d09-da6192355e07",
          "_events": {},
          "_eventsCount": 1,
          "cell": {
            "columnId": "Danube Tech",
            "rowId": "credential MUST have property \"issuer\""
          },
          "timer": {
            "_idleTimeout": -1,
            "_idlePrev": null,
            "_idleNext": null,
            "_idleStart": 5964,
            "_onTimeout": null,
            "_repeat": null,
            "_destroyed": true
          },
          "duration": 385,
          "state": "passed",
          "speed": "slow"
        },
        {
          "type": "test",
          "title": "\"credential.issuer\" MUST be a string or an object",
          "body": "async function() {\n        this.test.cell = {\n          columnId: name,\n          rowId: this.test.title\n        };\n        const body = createRequestBody({issuer});\n        const invalidIssuerTypes = [null, true, 4, []];\n        for(const invalidIssuerType of invalidIssuerTypes) {\n          body.credential.issuer = invalidIssuerType;\n          const {result, error} = await issuer.issue({body: {...body}});\n          shouldThrowInvalidInput({result, error});\n        }\n      }",
          "async": 0,
          "sync": true,
          "_timeout": 15000,
          "_slow": 75,
          "_retries": -1,
          "timedOut": false,
          "_currentRetry": 0,
          "pending": false,
          "parent": "45iymnRQuPi5LI2HPlHt3",
          "ctx": null,
          "_testId": "urn:uuid:07f5ac26-f344-45bc-bb6c-608f990430d0",
          "_events": {},
          "_eventsCount": 1,
          "cell": {
            "columnId": "Danube Tech",
            "rowId": "\"credential.issuer\" MUST be a string or an object"
          },
          "timer": {
            "_idleTimeout": -1,
            "_idlePrev": null,
            "_idleNext": null,
            "_idleStart": 6349,
            "_onTimeout": null,
            "_repeat": null,
            "_destroyed": true
          },
          "duration": 724,
          "state": "failed",
          "err": {
            "name": "AssertionError",
            "message": "Expected status code 400 invalid input!: expected 500 to equal 400",
            "showDiff": true,
            "actual": "500",
            "expected": "400",
            "operator": "strictEqual",
            "stack": "AssertionError: Expected status code 400 invalid input!: expected 500 to equal 400\n    at shouldThrowInvalidInput (tests/assertions.js:16:23)\n    at Context.<anonymous> (tests/10-issuer.js:142:11)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)"
          }
        },
        {
          "type": "test",
          "title": "credential MUST have property \"credentialSubject\"",
          "body": "async function() {\n        this.test.cell = {\n          columnId: name,\n          rowId: this.test.title\n        };\n        const body = createRequestBody({issuer});\n        delete body.credential.credentialSubject;\n        const {result, error} = await issuer.issue({body});\n        shouldThrowInvalidInput({result, error});\n      }",
          "async": 0,
          "sync": true,
          "_timeout": 15000,
          "_slow": 75,
          "_retries": -1,
          "timedOut": false,
          "_currentRetry": 0,
          "pending": false,
          "parent": "45iymnRQuPi5LI2HPlHt3",
          "ctx": null,
          "_testId": "urn:uuid:126b630a-c39f-4c5f-95ff-7050a5b815e5",
          "_events": {},
          "_eventsCount": 1,
          "cell": {
            "columnId": "Danube Tech",
            "rowId": "credential MUST have property \"credentialSubject\""
          },
          "timer": {
            "_idleTimeout": -1,
            "_idlePrev": null,
            "_idleNext": null,
            "_idleStart": 7082,
            "_onTimeout": null,
            "_repeat": null,
            "_destroyed": true
          },
          "duration": 372,
          "state": "passed",
          "speed": "slow"
        },
        {
          "type": "test",
          "title": "\"credential.credentialSubject\" MUST be an object",
          "body": "async function() {\n        this.test.cell = {\n          columnId: name,\n          rowId: this.test.title\n        };\n        const body = createRequestBody({issuer});\n        const invalidCredentialSubjectTypes = [null, true, 4, []];\n        for(const invalidCredentialSubjectType of\n          invalidCredentialSubjectTypes) {\n          body.credential.credentialSubject = invalidCredentialSubjectType;\n          const {result, error} = await issuer.issue({body: {...body}});\n          shouldThrowInvalidInput({result, error});\n        }\n      }",
          "async": 0,
          "sync": true,
          "_timeout": 15000,
          "_slow": 75,
          "_retries": -1,
          "timedOut": false,
          "_currentRetry": 0,
          "pending": false,
          "parent": "45iymnRQuPi5LI2HPlHt3",
          "ctx": null,
          "_testId": "urn:uuid:9466a465-e7b9-4e54-9bd1-cbafd9546579",
          "_events": {},
          "_eventsCount": 1,
          "cell": {
            "columnId": "Danube Tech",
            "rowId": "\"credential.credentialSubject\" MUST be an object"
          },
          "timer": {
            "_idleTimeout": -1,
            "_idlePrev": null,
            "_idleNext": null,
            "_idleStart": 7455,
            "_onTimeout": null,
            "_repeat": null,
            "_destroyed": true
          },
          "duration": 1470,
          "state": "passed",
          "speed": "slow"
        },
        {
          "type": "test",
          "title": "credential MAY have property \"issuanceDate\"",
          "body": "async function() {\n        this.test.cell = {\n          columnId: name,\n          rowId: this.test.title\n        };\n        const body = createRequestBody({issuer});\n        body.credential.issuanceDate = new Date().toISOString()\n          .replace('.000Z', 'Z');\n        const {result, error} = await issuer.issue({body});\n        should.exist(result, 'Expected result from issuer.');\n        should.not.exist(error, 'Expected issuer to not Error.');\n        result.status.should.equal(201, 'Expected statusCode 201.');\n      }",
          "async": 0,
          "sync": true,
          "_timeout": 15000,
          "_slow": 75,
          "_retries": -1,
          "timedOut": false,
          "_currentRetry": 0,
          "pending": false,
          "parent": "45iymnRQuPi5LI2HPlHt3",
          "ctx": null,
          "_testId": "urn:uuid:aeef637e-2e7f-49cf-a9cb-eff433d838c5",
          "_events": {},
          "_eventsCount": 1,
          "cell": {
            "columnId": "Danube Tech",
            "rowId": "credential MAY have property \"issuanceDate\""
          },
          "timer": {
            "_idleTimeout": -1,
            "_idlePrev": null,
            "_idleNext": null,
            "_idleStart": 8926,
            "_onTimeout": null,
            "_repeat": null,
            "_destroyed": true
          },
          "duration": 454,
          "state": "passed",
          "speed": "slow"
        },
        {
          "type": "test",
          "title": "credential MAY have property \"expirationDate\"",
          "body": "async function() {\n        this.test.cell = {\n          columnId: name,\n          rowId: this.test.title\n        };\n        const body = createRequestBody({issuer});\n        // expires in a year\n        const oneYear = Date.now() + 365 * 24 * 60 * 60 * 1000;\n        body.credential.expirationDate = new Date(oneYear).toISOString()\n          .replace('.000Z', 'Z');\n        const {result, error} = await issuer.issue({body});\n        should.exist(result, 'Expected result from issuer.');\n        should.not.exist(error, 'Expected issuer to not Error.');\n        result.status.should.equal(201, 'Expected statusCode 201.');\n      }",
          "async": 0,
          "sync": true,
          "_timeout": 15000,
          "_slow": 75,
          "_retries": -1,
          "timedOut": false,
          "_currentRetry": 0,
          "pending": false,
          "parent": "45iymnRQuPi5LI2HPlHt3",
          "ctx": null,
          "_testId": "urn:uuid:534e361a-f1c1-44b4-bf37-115759d5d1ab",
          "_events": {},
          "_eventsCount": 1,
          "cell": {
            "columnId": "Danube Tech",
            "rowId": "credential MAY have property \"expirationDate\""
          },
          "timer": {
            "_idleTimeout": -1,
            "_idlePrev": null,
            "_idleNext": null,
            "_idleStart": 9381,
            "_onTimeout": null,
            "_repeat": null,
            "_destroyed": true
          },
          "duration": 458,
          "state": "passed",
          "speed": "slow"
        },
        {
          "type": "test",
          "title": "MUST successfully issue a credential.",
          "body": "async function() {\n        this.test.cell = {\n          columnId: name,\n          rowId: this.test.title\n        };\n        const body = createRequestBody({issuer});\n        const {result, data: issuedVc, error} = await issuer.issue({body});\n        should.exist(result, 'Expected result from issuer.');\n        should.exist(issuedVc, 'Expected result to have data.');\n        should.not.exist(error, 'Expected issuer to not Error.');\n        result.status.should.equal(201, 'Expected statusCode 201.');\n        testIssuedVc({issuedVc});\n      }",
          "async": 0,
          "sync": true,
          "_timeout": 15000,
          "_slow": 75,
          "_retries": -1,
          "timedOut": false,
          "_currentRetry": 0,
          "pending": false,
          "parent": "Oi-4ObsyocDgyzVflLdzW",
          "ctx": null,
          "_testId": "urn:uuid:ac8ba57f-1e9a-4a6d-87a1-37b7e6731428",
          "_events": {},
          "_eventsCount": 1,
          "link": "https://example.com/",
          "cell": {
            "columnId": "Digital Bazaar",
            "rowId": "MUST successfully issue a credential."
          },
          "timer": {
            "_idleTimeout": -1,
            "_idlePrev": null,
            "_idleNext": null,
            "_idleStart": 9840,
            "_onTimeout": null,
            "_repeat": null,
            "_destroyed": true
          },
          "duration": 230,
          "state": "passed",
          "speed": "slow"
        },
        {
          "type": "test",
          "title": "Request body MUST have property \"credential\".",
          "body": "async function() {\n        this.test.cell = {\n          columnId: name,\n          rowId: this.test.title\n        };\n        const body = createRequestBody({issuer});\n        body.verifiableCredential = {...body.credential};\n        delete body.credential;\n        const {result, error} = await issuer.issue({body});\n        shouldThrowInvalidInput({result, error});\n      }",
          "async": 0,
          "sync": true,
          "_timeout": 15000,
          "_slow": 75,
          "_retries": -1,
          "timedOut": false,
          "_currentRetry": 0,
          "pending": false,
          "parent": "Oi-4ObsyocDgyzVflLdzW",
          "ctx": null,
          "_testId": "urn:uuid:aa1b46c2-a0d8-4653-83f5-52c8901cb3ff",
          "_events": {},
          "_eventsCount": 1,
          "cell": {
            "columnId": "Digital Bazaar",
            "rowId": "Request body MUST have property \"credential\"."
          },
          "timer": {
            "_idleTimeout": -1,
            "_idlePrev": null,
            "_idleNext": null,
            "_idleStart": 10071,
            "_onTimeout": null,
            "_repeat": null,
            "_destroyed": true
          },
          "duration": 103,
          "state": "passed",
          "speed": "slow"
        },
        {
          "type": "test",
          "title": "credential MUST have property \"@context\".",
          "body": "async function() {\n        this.test.cell = {\n          columnId: name,\n          rowId: this.test.title\n        };\n        const body = createRequestBody({issuer});\n        delete body.credential['@context'];\n        const {result, error} = await issuer.issue({body});\n        shouldThrowInvalidInput({result, error});\n      }",
          "async": 0,
          "sync": true,
          "_timeout": 15000,
          "_slow": 75,
          "_retries": -1,
          "timedOut": false,
          "_currentRetry": 0,
          "pending": false,
          "parent": "Oi-4ObsyocDgyzVflLdzW",
          "ctx": null,
          "_testId": "urn:uuid:e709c0b7-0f6f-4c0b-a858-ad9bc784c30c",
          "_events": {},
          "_eventsCount": 1,
          "cell": {
            "columnId": "Digital Bazaar",
            "rowId": "credential MUST have property \"@context\"."
          },
          "timer": {
            "_idleTimeout": -1,
            "_idlePrev": null,
            "_idleNext": null,
            "_idleStart": 10175,
            "_onTimeout": null,
            "_repeat": null,
            "_destroyed": true
          },
          "duration": 101,
          "state": "passed",
          "speed": "slow"
        },
        {
          "type": "test",
          "title": "credential \"@context\" MUST be an array.",
          "body": "async function() {\n        this.test.cell = {\n          columnId: name,\n          rowId: this.test.title\n        };\n        const body = createRequestBody({issuer});\n        body.credential['@context'] = 4;\n        const {result, error} = await issuer.issue({body});\n        shouldThrowInvalidInput({result, error});\n      }",
          "async": 0,
          "sync": true,
          "_timeout": 15000,
          "_slow": 75,
          "_retries": -1,
          "timedOut": false,
          "_currentRetry": 0,
          "pending": false,
          "parent": "Oi-4ObsyocDgyzVflLdzW",
          "ctx": null,
          "_testId": "urn:uuid:a143cabc-f882-47da-9800-c31b51217a41",
          "_events": {},
          "_eventsCount": 1,
          "cell": {
            "columnId": "Digital Bazaar",
            "rowId": "credential \"@context\" MUST be an array."
          },
          "timer": {
            "_idleTimeout": -1,
            "_idlePrev": null,
            "_idleNext": null,
            "_idleStart": 10277,
            "_onTimeout": null,
            "_repeat": null,
            "_destroyed": true
          },
          "duration": 114,
          "state": "passed",
          "speed": "slow"
        },
        {
          "type": "test",
          "title": "credential \"@context\" items MUST be strings.",
          "body": "async function() {\n        this.test.cell = {\n          columnId: name,\n          rowId: this.test.title\n        };\n        const body = createRequestBody({issuer});\n        const invalidContextTypes = [{foo: true}, 4, false, null];\n        for(const invalidContextType of invalidContextTypes) {\n          body.credential['@context'] = invalidContextType;\n          const {result, error} = await issuer.issue({body: {...body}});\n          shouldThrowInvalidInput({result, error});\n        }\n      }",
          "async": 0,
          "sync": true,
          "_timeout": 15000,
          "_slow": 75,
          "_retries": -1,
          "timedOut": false,
          "_currentRetry": 0,
          "pending": false,
          "parent": "Oi-4ObsyocDgyzVflLdzW",
          "ctx": null,
          "_testId": "urn:uuid:167b74d1-015a-4492-9c5f-8b2721c65421",
          "_events": {},
          "_eventsCount": 1,
          "cell": {
            "columnId": "Digital Bazaar",
            "rowId": "credential \"@context\" items MUST be strings."
          },
          "timer": {
            "_idleTimeout": -1,
            "_idlePrev": null,
            "_idleNext": null,
            "_idleStart": 10391,
            "_onTimeout": null,
            "_repeat": null,
            "_destroyed": true
          },
          "duration": 402,
          "state": "passed",
          "speed": "slow"
        },
        {
          "type": "test",
          "title": "credential MUST have property \"type\"",
          "body": "async function() {\n        this.test.cell = {\n          columnId: name,\n          rowId: this.test.title\n        };\n        const body = createRequestBody({issuer});\n        delete body.credential.type;\n        const {result, error} = await issuer.issue({body});\n        shouldThrowInvalidInput({result, error});\n      }",
          "async": 0,
          "sync": true,
          "_timeout": 15000,
          "_slow": 75,
          "_retries": -1,
          "timedOut": false,
          "_currentRetry": 0,
          "pending": false,
          "parent": "Oi-4ObsyocDgyzVflLdzW",
          "ctx": null,
          "_testId": "urn:uuid:ec3d97dd-0c7e-46f4-b97e-c0f4a7792d1c",
          "_events": {},
          "_eventsCount": 1,
          "cell": {
            "columnId": "Digital Bazaar",
            "rowId": "credential MUST have property \"type\""
          },
          "timer": {
            "_idleTimeout": -1,
            "_idlePrev": null,
            "_idleNext": null,
            "_idleStart": 10793,
            "_onTimeout": null,
            "_repeat": null,
            "_destroyed": true
          },
          "duration": 88,
          "state": "failed",
          "err": {
            "name": "AssertionError",
            "message": "Expected status code 400 invalid input!: expected 500 to equal 400",
            "showDiff": true,
            "actual": "500",
            "expected": "400",
            "operator": "strictEqual",
            "stack": "AssertionError: Expected status code 400 invalid input!: expected 500 to equal 400\n    at shouldThrowInvalidInput (tests/assertions.js:16:23)\n    at Context.<anonymous> (tests/10-issuer.js:97:9)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)"
          }
        },
        {
          "type": "test",
          "title": "\"credential.type\" MUST be an array.",
          "body": "async function() {\n        this.test.cell = {\n          columnId: name,\n          rowId: this.test.title\n        };\n        const body = createRequestBody({issuer});\n        body.credential.type = 4;\n        const {result, error} = await issuer.issue({body});\n        shouldThrowInvalidInput({result, error});\n      }",
          "async": 0,
          "sync": true,
          "_timeout": 15000,
          "_slow": 75,
          "_retries": -1,
          "timedOut": false,
          "_currentRetry": 0,
          "pending": false,
          "parent": "Oi-4ObsyocDgyzVflLdzW",
          "ctx": null,
          "_testId": "urn:uuid:939eac5d-a2b9-4aac-8d19-3b4bbe28ea9d",
          "_events": {},
          "_eventsCount": 1,
          "cell": {
            "columnId": "Digital Bazaar",
            "rowId": "\"credential.type\" MUST be an array."
          },
          "timer": {
            "_idleTimeout": -1,
            "_idlePrev": null,
            "_idleNext": null,
            "_idleStart": 10884,
            "_onTimeout": null,
            "_repeat": null,
            "_destroyed": true
          },
          "duration": 94,
          "state": "failed",
          "err": {
            "name": "AssertionError",
            "message": "Expected status code 400 invalid input!: expected 500 to equal 400",
            "showDiff": true,
            "actual": "500",
            "expected": "400",
            "operator": "strictEqual",
            "stack": "AssertionError: Expected status code 400 invalid input!: expected 500 to equal 400\n    at shouldThrowInvalidInput (tests/assertions.js:16:23)\n    at Context.<anonymous> (tests/10-issuer.js:107:9)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)"
          }
        },
        {
          "type": "test",
          "title": "\"credential.type\" items MUST be strings",
          "body": "async function() {\n        this.test.cell = {\n          columnId: name,\n          rowId: this.test.title\n        };\n        const body = createRequestBody({issuer});\n        const invalidCredentialTypes = [null, true, 4, []];\n        for(const invalidCredentialType of invalidCredentialTypes) {\n          body.credential.type = invalidCredentialType;\n          const {result, error} = await issuer.issue({body: {...body}});\n          shouldThrowInvalidInput({result, error});\n        }\n      }",
          "async": 0,
          "sync": true,
          "_timeout": 15000,
          "_slow": 75,
          "_retries": -1,
          "timedOut": false,
          "_currentRetry": 0,
          "pending": false,
          "parent": "Oi-4ObsyocDgyzVflLdzW",
          "ctx": null,
          "_testId": "urn:uuid:befee3ab-0503-4bba-b3da-1135def1be7c",
          "_events": {},
          "_eventsCount": 1,
          "cell": {
            "columnId": "Digital Bazaar",
            "rowId": "\"credential.type\" items MUST be strings"
          },
          "timer": {
            "_idleTimeout": -1,
            "_idlePrev": null,
            "_idleNext": null,
            "_idleStart": 10981,
            "_onTimeout": null,
            "_repeat": null,
            "_destroyed": true
          },
          "duration": 97,
          "state": "failed",
          "err": {
            "name": "AssertionError",
            "message": "Expected status code 400 invalid input!: expected 500 to equal 400",
            "showDiff": true,
            "actual": "500",
            "expected": "400",
            "operator": "strictEqual",
            "stack": "AssertionError: Expected status code 400 invalid input!: expected 500 to equal 400\n    at shouldThrowInvalidInput (tests/assertions.js:16:23)\n    at Context.<anonymous> (tests/10-issuer.js:119:11)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)"
          }
        },
        {
          "type": "test",
          "title": "credential MUST have property \"issuer\"",
          "body": "async function() {\n        this.test.cell = {\n          columnId: name,\n          rowId: this.test.title\n        };\n        const body = createRequestBody({issuer});\n        delete body.credential.issuer;\n        const {result, error} = await issuer.issue({body});\n        shouldThrowInvalidInput({result, error});\n      }",
          "async": 0,
          "sync": true,
          "_timeout": 15000,
          "_slow": 75,
          "_retries": -1,
          "timedOut": false,
          "_currentRetry": 0,
          "pending": false,
          "parent": "Oi-4ObsyocDgyzVflLdzW",
          "ctx": null,
          "_testId": "urn:uuid:a7fcf899-f79a-4f24-a280-89338ac3cf10",
          "_events": {},
          "_eventsCount": 1,
          "cell": {
            "columnId": "Digital Bazaar",
            "rowId": "credential MUST have property \"issuer\""
          },
          "timer": {
            "_idleTimeout": -1,
            "_idlePrev": null,
            "_idleNext": null,
            "_idleStart": 11081,
            "_onTimeout": null,
            "_repeat": null,
            "_destroyed": true
          },
          "duration": 135,
          "state": "failed",
          "err": {
            "name": "AssertionError",
            "message": "Expected no result from issuer.: expected Response{ size: +0, data: { …(1) }, …(2) } to not exist",
            "showDiff": false,
            "actual": {
              "size": 0,
              "data": {
                "verifiableCredential": {
                  "@context": [
                    "https://www.w3.org/2018/credentials/v1",
                    "https://w3id.org/security/suites/ed25519-2020/v1"
                  ],
                  "type": [
                    "VerifiableCredential"
                  ],
                  "credentialSubject": {
                    "id": "did:key:z6MkhTNL7i2etLerDK8Acz5t528giE5KA4p75T6ka1E1D74r"
                  },
                  "id": "urn:uuid:a8f0e464-d20d-4a58-aa50-c5155c95b30d",
                  "issuer": "did:key:z6MkkyNu8RUzvTMCkbw7HyNGPzuExz7VMbeoMtRuu9o4kGdw",
                  "issuanceDate": "2022-05-23T18:06:49Z",
                  "proof": {
                    "type": "Ed25519Signature2020",
                    "created": "2022-05-23T18:06:49Z",
                    "verificationMethod": "did:key:z6MkkyNu8RUzvTMCkbw7HyNGPzuExz7VMbeoMtRuu9o4kGdw#z6MkkyNu8RUzvTMCkbw7HyNGPzuExz7VMbeoMtRuu9o4kGdw",
                    "proofPurpose": "assertionMethod",
                    "proofValue": "z4gdyohH8bbRneB9xhfwXuPDoBMLBEEJ25PKvJH8x8ZJ427ATczZxnrMx2ZmMwVvSPYb6A2n2rCZd5qk3S9ubuY7J"
                  }
                }
              }
            },
            "operator": "notStrictEqual",
            "stack": "AssertionError: Expected no result from issuer.: expected Response{ size: +0, data: { …(1) }, …(2) } to not exist\n    at Object.should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at shouldThrowInvalidInput (tests/assertions.js:11:14)\n    at Context.<anonymous> (tests/10-issuer.js:130:9)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)"
          }
        },
        {
          "type": "test",
          "title": "\"credential.issuer\" MUST be a string or an object",
          "body": "async function() {\n        this.test.cell = {\n          columnId: name,\n          rowId: this.test.title\n        };\n        const body = createRequestBody({issuer});\n        const invalidIssuerTypes = [null, true, 4, []];\n        for(const invalidIssuerType of invalidIssuerTypes) {\n          body.credential.issuer = invalidIssuerType;\n          const {result, error} = await issuer.issue({body: {...body}});\n          shouldThrowInvalidInput({result, error});\n        }\n      }",
          "async": 0,
          "sync": true,
          "_timeout": 15000,
          "_slow": 75,
          "_retries": -1,
          "timedOut": false,
          "_currentRetry": 0,
          "pending": false,
          "parent": "Oi-4ObsyocDgyzVflLdzW",
          "ctx": null,
          "_testId": "urn:uuid:1328ae93-e51b-412b-80a7-38813391507c",
          "_events": {},
          "_eventsCount": 1,
          "cell": {
            "columnId": "Digital Bazaar",
            "rowId": "\"credential.issuer\" MUST be a string or an object"
          },
          "timer": {
            "_idleTimeout": -1,
            "_idlePrev": null,
            "_idleNext": null,
            "_idleStart": 11220,
            "_onTimeout": null,
            "_repeat": null,
            "_destroyed": true
          },
          "duration": 132,
          "state": "failed",
          "err": {
            "name": "AssertionError",
            "message": "Expected no result from issuer.: expected Response{ size: +0, data: { …(1) }, …(2) } to not exist",
            "showDiff": false,
            "actual": {
              "size": 0,
              "data": {
                "verifiableCredential": {
                  "@context": [
                    "https://www.w3.org/2018/credentials/v1",
                    "https://w3id.org/security/suites/ed25519-2020/v1"
                  ],
                  "type": [
                    "VerifiableCredential"
                  ],
                  "credentialSubject": {
                    "id": "did:key:z6MkhTNL7i2etLerDK8Acz5t528giE5KA4p75T6ka1E1D74r"
                  },
                  "id": "urn:uuid:548424a4-a907-4726-a415-43771593fd21",
                  "issuer": {
                    "id": "did:key:z6MkkyNu8RUzvTMCkbw7HyNGPzuExz7VMbeoMtRuu9o4kGdw"
                  },
                  "issuanceDate": "2022-05-23T18:06:49Z",
                  "proof": {
                    "type": "Ed25519Signature2020",
                    "created": "2022-05-23T18:06:49Z",
                    "verificationMethod": "did:key:z6MkkyNu8RUzvTMCkbw7HyNGPzuExz7VMbeoMtRuu9o4kGdw#z6MkkyNu8RUzvTMCkbw7HyNGPzuExz7VMbeoMtRuu9o4kGdw",
                    "proofPurpose": "assertionMethod",
                    "proofValue": "zGpdRb7P8mwoanaJ8vHCx9QvfqC517zgy3yR6AyRpiajegRfz8uvfx5cfVPvCZZrDgUGWeiibpZH1uiG6eSRqPem"
                  }
                }
              }
            },
            "operator": "notStrictEqual",
            "stack": "AssertionError: Expected no result from issuer.: expected Response{ size: +0, data: { …(1) }, …(2) } to not exist\n    at Object.should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at shouldThrowInvalidInput (tests/assertions.js:11:14)\n    at Context.<anonymous> (tests/10-issuer.js:142:11)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)"
          }
        },
        {
          "type": "test",
          "title": "credential MUST have property \"credentialSubject\"",
          "body": "async function() {\n        this.test.cell = {\n          columnId: name,\n          rowId: this.test.title\n        };\n        const body = createRequestBody({issuer});\n        delete body.credential.credentialSubject;\n        const {result, error} = await issuer.issue({body});\n        shouldThrowInvalidInput({result, error});\n      }",
          "async": 0,
          "sync": true,
          "_timeout": 15000,
          "_slow": 75,
          "_retries": -1,
          "timedOut": false,
          "_currentRetry": 0,
          "pending": false,
          "parent": "Oi-4ObsyocDgyzVflLdzW",
          "ctx": null,
          "_testId": "urn:uuid:ca890a10-4f5f-4f48-9126-bd16946a4f6b",
          "_events": {},
          "_eventsCount": 1,
          "cell": {
            "columnId": "Digital Bazaar",
            "rowId": "credential MUST have property \"credentialSubject\""
          },
          "timer": {
            "_idleTimeout": -1,
            "_idlePrev": null,
            "_idleNext": null,
            "_idleStart": 11356,
            "_onTimeout": null,
            "_repeat": null,
            "_destroyed": true
          },
          "duration": 101,
          "state": "failed",
          "err": {
            "name": "AssertionError",
            "message": "Expected status code 400 invalid input!: expected 500 to equal 400",
            "showDiff": true,
            "actual": "500",
            "expected": "400",
            "operator": "strictEqual",
            "stack": "AssertionError: Expected status code 400 invalid input!: expected 500 to equal 400\n    at shouldThrowInvalidInput (tests/assertions.js:16:23)\n    at Context.<anonymous> (tests/10-issuer.js:153:9)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)"
          }
        },
        {
          "type": "test",
          "title": "\"credential.credentialSubject\" MUST be an object",
          "body": "async function() {\n        this.test.cell = {\n          columnId: name,\n          rowId: this.test.title\n        };\n        const body = createRequestBody({issuer});\n        const invalidCredentialSubjectTypes = [null, true, 4, []];\n        for(const invalidCredentialSubjectType of\n          invalidCredentialSubjectTypes) {\n          body.credential.credentialSubject = invalidCredentialSubjectType;\n          const {result, error} = await issuer.issue({body: {...body}});\n          shouldThrowInvalidInput({result, error});\n        }\n      }",
          "async": 0,
          "sync": true,
          "_timeout": 15000,
          "_slow": 75,
          "_retries": -1,
          "timedOut": false,
          "_currentRetry": 0,
          "pending": false,
          "parent": "Oi-4ObsyocDgyzVflLdzW",
          "ctx": null,
          "_testId": "urn:uuid:f479f61b-fa5a-4159-abfa-a8d7c0d28d05",
          "_events": {},
          "_eventsCount": 1,
          "cell": {
            "columnId": "Digital Bazaar",
            "rowId": "\"credential.credentialSubject\" MUST be an object"
          },
          "timer": {
            "_idleTimeout": -1,
            "_idlePrev": null,
            "_idleNext": null,
            "_idleStart": 11459,
            "_onTimeout": null,
            "_repeat": null,
            "_destroyed": true
          },
          "duration": 117,
          "state": "failed",
          "err": {
            "name": "AssertionError",
            "message": "Expected status code 400 invalid input!: expected 500 to equal 400",
            "showDiff": true,
            "actual": "500",
            "expected": "400",
            "operator": "strictEqual",
            "stack": "AssertionError: Expected status code 400 invalid input!: expected 500 to equal 400\n    at shouldThrowInvalidInput (tests/assertions.js:16:23)\n    at Context.<anonymous> (tests/10-issuer.js:166:11)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)"
          }
        },
        {
          "type": "test",
          "title": "credential MAY have property \"issuanceDate\"",
          "body": "async function() {\n        this.test.cell = {\n          columnId: name,\n          rowId: this.test.title\n        };\n        const body = createRequestBody({issuer});\n        body.credential.issuanceDate = new Date().toISOString()\n          .replace('.000Z', 'Z');\n        const {result, error} = await issuer.issue({body});\n        should.exist(result, 'Expected result from issuer.');\n        should.not.exist(error, 'Expected issuer to not Error.');\n        result.status.should.equal(201, 'Expected statusCode 201.');\n      }",
          "async": 0,
          "sync": true,
          "_timeout": 15000,
          "_slow": 75,
          "_retries": -1,
          "timedOut": false,
          "_currentRetry": 0,
          "pending": false,
          "parent": "Oi-4ObsyocDgyzVflLdzW",
          "ctx": null,
          "_testId": "urn:uuid:18c454b4-db18-48b3-ad4b-d42dd182f7a6",
          "_events": {},
          "_eventsCount": 1,
          "cell": {
            "columnId": "Digital Bazaar",
            "rowId": "credential MAY have property \"issuanceDate\""
          },
          "timer": {
            "_idleTimeout": -1,
            "_idlePrev": null,
            "_idleNext": null,
            "_idleStart": 11578,
            "_onTimeout": null,
            "_repeat": null,
            "_destroyed": true
          },
          "duration": 132,
          "state": "passed",
          "speed": "slow"
        },
        {
          "type": "test",
          "title": "credential MAY have property \"expirationDate\"",
          "body": "async function() {\n        this.test.cell = {\n          columnId: name,\n          rowId: this.test.title\n        };\n        const body = createRequestBody({issuer});\n        // expires in a year\n        const oneYear = Date.now() + 365 * 24 * 60 * 60 * 1000;\n        body.credential.expirationDate = new Date(oneYear).toISOString()\n          .replace('.000Z', 'Z');\n        const {result, error} = await issuer.issue({body});\n        should.exist(result, 'Expected result from issuer.');\n        should.not.exist(error, 'Expected issuer to not Error.');\n        result.status.should.equal(201, 'Expected statusCode 201.');\n      }",
          "async": 0,
          "sync": true,
          "_timeout": 15000,
          "_slow": 75,
          "_retries": -1,
          "timedOut": false,
          "_currentRetry": 0,
          "pending": false,
          "parent": "Oi-4ObsyocDgyzVflLdzW",
          "ctx": null,
          "_testId": "urn:uuid:2bab1950-6183-4f9e-bd23-03b3263f48db",
          "_events": {},
          "_eventsCount": 1,
          "cell": {
            "columnId": "Digital Bazaar",
            "rowId": "credential MAY have property \"expirationDate\""
          },
          "timer": {
            "_idleTimeout": -1,
            "_idlePrev": null,
            "_idleNext": null,
            "_idleStart": 11711,
            "_onTimeout": null,
            "_repeat": null,
            "_destroyed": true
          },
          "duration": 128,
          "state": "passed",
          "speed": "slow"
        },
        {
          "type": "test",
          "title": "MUST successfully issue a credential.",
          "body": "async function() {\n        this.test.cell = {\n          columnId: name,\n          rowId: this.test.title\n        };\n        const body = createRequestBody({issuer});\n        const {result, data: issuedVc, error} = await issuer.issue({body});\n        should.exist(result, 'Expected result from issuer.');\n        should.exist(issuedVc, 'Expected result to have data.');\n        should.not.exist(error, 'Expected issuer to not Error.');\n        result.status.should.equal(201, 'Expected statusCode 201.');\n        testIssuedVc({issuedVc});\n      }",
          "async": 0,
          "sync": true,
          "_timeout": 15000,
          "_slow": 75,
          "_retries": -1,
          "timedOut": false,
          "_currentRetry": 0,
          "pending": false,
          "parent": "91AvPgf3LfUxgt4HBscYI",
          "ctx": null,
          "_testId": "urn:uuid:59b50b61-bece-4e8b-a8ed-5f0c5e1f9a02",
          "_events": {},
          "_eventsCount": 1,
          "link": "https://example.com/",
          "cell": {
            "columnId": "SecureKey",
            "rowId": "MUST successfully issue a credential."
          },
          "timer": {
            "_idleTimeout": -1,
            "_idlePrev": null,
            "_idleNext": null,
            "_idleStart": 11843,
            "_onTimeout": null,
            "_repeat": null,
            "_destroyed": true
          },
          "duration": 122,
          "state": "failed",
          "err": {
            "name": "AssertionError",
            "message": "Expected result from issuer.: expected undefined to exist",
            "showDiff": false,
            "operator": "strictEqual",
            "stack": "AssertionError: Expected result from issuer.: expected undefined to exist\n    at Object.should.exist (node_modules/chai/lib/chai/interface/should.js:144:34)\n    at Context.<anonymous> (tests/10-issuer.js:39:16)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)"
          }
        },
        {
          "type": "test",
          "title": "Request body MUST have property \"credential\".",
          "body": "async function() {\n        this.test.cell = {\n          columnId: name,\n          rowId: this.test.title\n        };\n        const body = createRequestBody({issuer});\n        body.verifiableCredential = {...body.credential};\n        delete body.credential;\n        const {result, error} = await issuer.issue({body});\n        shouldThrowInvalidInput({result, error});\n      }",
          "async": 0,
          "sync": true,
          "_timeout": 15000,
          "_slow": 75,
          "_retries": -1,
          "timedOut": false,
          "_currentRetry": 0,
          "pending": false,
          "parent": "91AvPgf3LfUxgt4HBscYI",
          "ctx": null,
          "_testId": "urn:uuid:4852e9d8-74e3-4af2-a97a-aef2c3dab4a6",
          "_events": {},
          "_eventsCount": 1,
          "cell": {
            "columnId": "SecureKey",
            "rowId": "Request body MUST have property \"credential\"."
          },
          "timer": {
            "_idleTimeout": -1,
            "_idlePrev": null,
            "_idleNext": null,
            "_idleStart": 11964,
            "_onTimeout": null,
            "_repeat": null,
            "_destroyed": true
          },
          "duration": 91,
          "state": "passed",
          "speed": "slow"
        },
        {
          "type": "test",
          "title": "credential MUST have property \"@context\".",
          "body": "async function() {\n        this.test.cell = {\n          columnId: name,\n          rowId: this.test.title\n        };\n        const body = createRequestBody({issuer});\n        delete body.credential['@context'];\n        const {result, error} = await issuer.issue({body});\n        shouldThrowInvalidInput({result, error});\n      }",
          "async": 0,
          "sync": true,
          "_timeout": 15000,
          "_slow": 75,
          "_retries": -1,
          "timedOut": false,
          "_currentRetry": 0,
          "pending": false,
          "parent": "91AvPgf3LfUxgt4HBscYI",
          "ctx": null,
          "_testId": "urn:uuid:be23d6aa-6439-4e1f-aea3-73a2790f7c94",
          "_events": {},
          "_eventsCount": 1,
          "cell": {
            "columnId": "SecureKey",
            "rowId": "credential MUST have property \"@context\"."
          },
          "timer": {
            "_idleTimeout": -1,
            "_idlePrev": null,
            "_idleNext": null,
            "_idleStart": 12056,
            "_onTimeout": null,
            "_repeat": null,
            "_destroyed": true
          },
          "duration": 93,
          "state": "passed",
          "speed": "slow"
        },
        {
          "type": "test",
          "title": "credential \"@context\" MUST be an array.",
          "body": "async function() {\n        this.test.cell = {\n          columnId: name,\n          rowId: this.test.title\n        };\n        const body = createRequestBody({issuer});\n        body.credential['@context'] = 4;\n        const {result, error} = await issuer.issue({body});\n        shouldThrowInvalidInput({result, error});\n      }",
          "async": 0,
          "sync": true,
          "_timeout": 15000,
          "_slow": 75,
          "_retries": -1,
          "timedOut": false,
          "_currentRetry": 0,
          "pending": false,
          "parent": "91AvPgf3LfUxgt4HBscYI",
          "ctx": null,
          "_testId": "urn:uuid:65ef9e4a-2c34-4f4e-80a7-73de11d23bc1",
          "_events": {},
          "_eventsCount": 1,
          "cell": {
            "columnId": "SecureKey",
            "rowId": "credential \"@context\" MUST be an array."
          },
          "timer": {
            "_idleTimeout": -1,
            "_idlePrev": null,
            "_idleNext": null,
            "_idleStart": 12151,
            "_onTimeout": null,
            "_repeat": null,
            "_destroyed": true
          },
          "duration": 93,
          "state": "passed",
          "speed": "slow"
        },
        {
          "type": "test",
          "title": "credential \"@context\" items MUST be strings.",
          "body": "async function() {\n        this.test.cell = {\n          columnId: name,\n          rowId: this.test.title\n        };\n        const body = createRequestBody({issuer});\n        const invalidContextTypes = [{foo: true}, 4, false, null];\n        for(const invalidContextType of invalidContextTypes) {\n          body.credential['@context'] = invalidContextType;\n          const {result, error} = await issuer.issue({body: {...body}});\n          shouldThrowInvalidInput({result, error});\n        }\n      }",
          "async": 0,
          "sync": true,
          "_timeout": 15000,
          "_slow": 75,
          "_retries": -1,
          "timedOut": false,
          "_currentRetry": 0,
          "pending": false,
          "parent": "91AvPgf3LfUxgt4HBscYI",
          "ctx": null,
          "_testId": "urn:uuid:f68f9d53-bc41-4f79-9fd2-0eb7e9e3e892",
          "_events": {},
          "_eventsCount": 1,
          "cell": {
            "columnId": "SecureKey",
            "rowId": "credential \"@context\" items MUST be strings."
          },
          "timer": {
            "_idleTimeout": -1,
            "_idlePrev": null,
            "_idleNext": null,
            "_idleStart": 12245,
            "_onTimeout": null,
            "_repeat": null,
            "_destroyed": true
          },
          "duration": 371,
          "state": "passed",
          "speed": "slow"
        },
        {
          "type": "test",
          "title": "credential MUST have property \"type\"",
          "body": "async function() {\n        this.test.cell = {\n          columnId: name,\n          rowId: this.test.title\n        };\n        const body = createRequestBody({issuer});\n        delete body.credential.type;\n        const {result, error} = await issuer.issue({body});\n        shouldThrowInvalidInput({result, error});\n      }",
          "async": 0,
          "sync": true,
          "_timeout": 15000,
          "_slow": 75,
          "_retries": -1,
          "timedOut": false,
          "_currentRetry": 0,
          "pending": false,
          "parent": "91AvPgf3LfUxgt4HBscYI",
          "ctx": null,
          "_testId": "urn:uuid:410f12c0-0375-44b2-a289-4eb19eb5331c",
          "_events": {},
          "_eventsCount": 1,
          "cell": {
            "columnId": "SecureKey",
            "rowId": "credential MUST have property \"type\""
          },
          "timer": {
            "_idleTimeout": -1,
            "_idlePrev": null,
            "_idleNext": null,
            "_idleStart": 12618,
            "_onTimeout": null,
            "_repeat": null,
            "_destroyed": true
          },
          "duration": 92,
          "state": "passed",
          "speed": "slow"
        },
        {
          "type": "test",
          "title": "\"credential.type\" MUST be an array.",
          "body": "async function() {\n        this.test.cell = {\n          columnId: name,\n          rowId: this.test.title\n        };\n        const body = createRequestBody({issuer});\n        body.credential.type = 4;\n        const {result, error} = await issuer.issue({body});\n        shouldThrowInvalidInput({result, error});\n      }",
          "async": 0,
          "sync": true,
          "_timeout": 15000,
          "_slow": 75,
          "_retries": -1,
          "timedOut": false,
          "_currentRetry": 0,
          "pending": false,
          "parent": "91AvPgf3LfUxgt4HBscYI",
          "ctx": null,
          "_testId": "urn:uuid:45e16d86-9be4-4957-909c-f0f065ba0a2a",
          "_events": {},
          "_eventsCount": 1,
          "cell": {
            "columnId": "SecureKey",
            "rowId": "\"credential.type\" MUST be an array."
          },
          "timer": {
            "_idleTimeout": -1,
            "_idlePrev": null,
            "_idleNext": null,
            "_idleStart": 12711,
            "_onTimeout": null,
            "_repeat": null,
            "_destroyed": true
          },
          "duration": 97,
          "state": "passed",
          "speed": "slow"
        },
        {
          "type": "test",
          "title": "\"credential.type\" items MUST be strings",
          "body": "async function() {\n        this.test.cell = {\n          columnId: name,\n          rowId: this.test.title\n        };\n        const body = createRequestBody({issuer});\n        const invalidCredentialTypes = [null, true, 4, []];\n        for(const invalidCredentialType of invalidCredentialTypes) {\n          body.credential.type = invalidCredentialType;\n          const {result, error} = await issuer.issue({body: {...body}});\n          shouldThrowInvalidInput({result, error});\n        }\n      }",
          "async": 0,
          "sync": true,
          "_timeout": 15000,
          "_slow": 75,
          "_retries": -1,
          "timedOut": false,
          "_currentRetry": 0,
          "pending": false,
          "parent": "91AvPgf3LfUxgt4HBscYI",
          "ctx": null,
          "_testId": "urn:uuid:ee3b9f8b-0b5f-4f7d-9695-772b200b922d",
          "_events": {},
          "_eventsCount": 1,
          "cell": {
            "columnId": "SecureKey",
            "rowId": "\"credential.type\" items MUST be strings"
          },
          "timer": {
            "_idleTimeout": -1,
            "_idlePrev": null,
            "_idleNext": null,
            "_idleStart": 12810,
            "_onTimeout": null,
            "_repeat": null,
            "_destroyed": true
          },
          "duration": 372,
          "state": "passed",
          "speed": "slow"
        },
        {
          "type": "test",
          "title": "credential MUST have property \"issuer\"",
          "body": "async function() {\n        this.test.cell = {\n          columnId: name,\n          rowId: this.test.title\n        };\n        const body = createRequestBody({issuer});\n        delete body.credential.issuer;\n        const {result, error} = await issuer.issue({body});\n        shouldThrowInvalidInput({result, error});\n      }",
          "async": 0,
          "sync": true,
          "_timeout": 15000,
          "_slow": 75,
          "_retries": -1,
          "timedOut": false,
          "_currentRetry": 0,
          "pending": false,
          "parent": "91AvPgf3LfUxgt4HBscYI",
          "ctx": null,
          "_testId": "urn:uuid:b6cdc865-df87-4402-94e5-39bb27e438ea",
          "_events": {},
          "_eventsCount": 1,
          "cell": {
            "columnId": "SecureKey",
            "rowId": "credential MUST have property \"issuer\""
          },
          "timer": {
            "_idleTimeout": -1,
            "_idlePrev": null,
            "_idleNext": null,
            "_idleStart": 13182,
            "_onTimeout": null,
            "_repeat": null,
            "_destroyed": true
          },
          "duration": 100,
          "state": "passed",
          "speed": "slow"
        },
        {
          "type": "test",
          "title": "\"credential.issuer\" MUST be a string or an object",
          "body": "async function() {\n        this.test.cell = {\n          columnId: name,\n          rowId: this.test.title\n        };\n        const body = createRequestBody({issuer});\n        const invalidIssuerTypes = [null, true, 4, []];\n        for(const invalidIssuerType of invalidIssuerTypes) {\n          body.credential.issuer = invalidIssuerType;\n          const {result, error} = await issuer.issue({body: {...body}});\n          shouldThrowInvalidInput({result, error});\n        }\n      }",
          "async": 0,
          "sync": true,
          "_timeout": 15000,
          "_slow": 75,
          "_retries": -1,
          "timedOut": false,
          "_currentRetry": 0,
          "pending": false,
          "parent": "91AvPgf3LfUxgt4HBscYI",
          "ctx": null,
          "_testId": "urn:uuid:39a8984d-eed5-4c32-8248-5884c8f020ba",
          "_events": {},
          "_eventsCount": 1,
          "cell": {
            "columnId": "SecureKey",
            "rowId": "\"credential.issuer\" MUST be a string or an object"
          },
          "timer": {
            "_idleTimeout": -1,
            "_idlePrev": null,
            "_idleNext": null,
            "_idleStart": 13283,
            "_onTimeout": null,
            "_repeat": null,
            "_destroyed": true
          },
          "duration": 378,
          "state": "passed",
          "speed": "slow"
        },
        {
          "type": "test",
          "title": "credential MUST have property \"credentialSubject\"",
          "body": "async function() {\n        this.test.cell = {\n          columnId: name,\n          rowId: this.test.title\n        };\n        const body = createRequestBody({issuer});\n        delete body.credential.credentialSubject;\n        const {result, error} = await issuer.issue({body});\n        shouldThrowInvalidInput({result, error});\n      }",
          "async": 0,
          "sync": true,
          "_timeout": 15000,
          "_slow": 75,
          "_retries": -1,
          "timedOut": false,
          "_currentRetry": 0,
          "pending": false,
          "parent": "91AvPgf3LfUxgt4HBscYI",
          "ctx": null,
          "_testId": "urn:uuid:2b612e97-4e8b-48c2-87bb-8018fd3c43e5",
          "_events": {},
          "_eventsCount": 1,
          "cell": {
            "columnId": "SecureKey",
            "rowId": "credential MUST have property \"credentialSubject\""
          },
          "timer": {
            "_idleTimeout": -1,
            "_idlePrev": null,
            "_idleNext": null,
            "_idleStart": 13662,
            "_onTimeout": null,
            "_repeat": null,
            "_destroyed": true
          },
          "duration": 96,
          "state": "passed",
          "speed": "slow"
        },
        {
          "type": "test",
          "title": "\"credential.credentialSubject\" MUST be an object",
          "body": "async function() {\n        this.test.cell = {\n          columnId: name,\n          rowId: this.test.title\n        };\n        const body = createRequestBody({issuer});\n        const invalidCredentialSubjectTypes = [null, true, 4, []];\n        for(const invalidCredentialSubjectType of\n          invalidCredentialSubjectTypes) {\n          body.credential.credentialSubject = invalidCredentialSubjectType;\n          const {result, error} = await issuer.issue({body: {...body}});\n          shouldThrowInvalidInput({result, error});\n        }\n      }",
          "async": 0,
          "sync": true,
          "_timeout": 15000,
          "_slow": 75,
          "_retries": -1,
          "timedOut": false,
          "_currentRetry": 0,
          "pending": false,
          "parent": "91AvPgf3LfUxgt4HBscYI",
          "ctx": null,
          "_testId": "urn:uuid:9761cf8a-581e-48b4-911a-b0bc19d63433",
          "_events": {},
          "_eventsCount": 1,
          "cell": {
            "columnId": "SecureKey",
            "rowId": "\"credential.credentialSubject\" MUST be an object"
          },
          "timer": {
            "_idleTimeout": -1,
            "_idlePrev": null,
            "_idleNext": null,
            "_idleStart": 13760,
            "_onTimeout": null,
            "_repeat": null,
            "_destroyed": true
          },
          "duration": 377,
          "state": "passed",
          "speed": "slow"
        },
        {
          "type": "test",
          "title": "credential MAY have property \"issuanceDate\"",
          "body": "async function() {\n        this.test.cell = {\n          columnId: name,\n          rowId: this.test.title\n        };\n        const body = createRequestBody({issuer});\n        body.credential.issuanceDate = new Date().toISOString()\n          .replace('.000Z', 'Z');\n        const {result, error} = await issuer.issue({body});\n        should.exist(result, 'Expected result from issuer.');\n        should.not.exist(error, 'Expected issuer to not Error.');\n        result.status.should.equal(201, 'Expected statusCode 201.');\n      }",
          "async": 0,
          "sync": true,
          "_timeout": 15000,
          "_slow": 75,
          "_retries": -1,
          "timedOut": false,
          "_currentRetry": 0,
          "pending": false,
          "parent": "91AvPgf3LfUxgt4HBscYI",
          "ctx": null,
          "_testId": "urn:uuid:0b1e9303-1dfe-4c96-a50c-624fdb9074f1",
          "_events": {},
          "_eventsCount": 1,
          "cell": {
            "columnId": "SecureKey",
            "rowId": "credential MAY have property \"issuanceDate\""
          },
          "timer": {
            "_idleTimeout": -1,
            "_idlePrev": null,
            "_idleNext": null,
            "_idleStart": 14139,
            "_onTimeout": null,
            "_repeat": null,
            "_destroyed": true
          },
          "duration": 101,
          "state": "passed",
          "speed": "slow"
        },
        {
          "type": "test",
          "title": "credential MAY have property \"expirationDate\"",
          "body": "async function() {\n        this.test.cell = {\n          columnId: name,\n          rowId: this.test.title\n        };\n        const body = createRequestBody({issuer});\n        // expires in a year\n        const oneYear = Date.now() + 365 * 24 * 60 * 60 * 1000;\n        body.credential.expirationDate = new Date(oneYear).toISOString()\n          .replace('.000Z', 'Z');\n        const {result, error} = await issuer.issue({body});\n        should.exist(result, 'Expected result from issuer.');\n        should.not.exist(error, 'Expected issuer to not Error.');\n        result.status.should.equal(201, 'Expected statusCode 201.');\n      }",
          "async": 0,
          "sync": true,
          "_timeout": 15000,
          "_slow": 75,
          "_retries": -1,
          "timedOut": false,
          "_currentRetry": 0,
          "pending": false,
          "parent": "91AvPgf3LfUxgt4HBscYI",
          "ctx": null,
          "_testId": "urn:uuid:bd65ee1f-2ea9-471e-bae5-39f60cbebb13",
          "_events": {},
          "_eventsCount": 1,
          "cell": {
            "columnId": "SecureKey",
            "rowId": "credential MAY have property \"expirationDate\""
          },
          "timer": {
            "_idleTimeout": -1,
            "_idlePrev": null,
            "_idleNext": null,
            "_idleStart": 14242,
            "_onTimeout": null,
            "_repeat": null,
            "_destroyed": true
          },
          "duration": 90,
          "state": "failed",
          "err": {
            "name": "AssertionError",
            "message": "Expected result from issuer.: expected undefined to exist",
            "showDiff": false,
            "operator": "strictEqual",
            "stack": "AssertionError: Expected result from issuer.: expected undefined to exist\n    at Object.should.exist (node_modules/chai/lib/chai/interface/should.js:144:34)\n    at Context.<anonymous> (tests/10-issuer.js:193:16)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)"
          }
        }
      ],
      "root": false,
      "pending": false,
      "_retries": -1,
      "_beforeEach": [],
      "_beforeAll": [],
      "_afterEach": [],
      "_afterAll": [],
      "_timeout": 15000,
      "_slow": 75,
      "_bail": false,
      "_onlyTests": [],
      "_onlySuites": [],
      "delayed": false,
      "parent": "mid0oIVYC9MDK9BWRzSaQ",
      "summary": {},
      "matrix": true,
      "report": true,
      "implemented": [
        "Danube Tech",
        "Digital Bazaar",
        "SecureKey"
      ],
      "notImplemented": [
        "MATTR",
        "Mavennet",
        "mesur.io",
        "Transmute"
      ],
      "rowLabel": "Test Name",
      "columnLabel": "Issuer",
      "reportData": [],
      "_testId": "urn:uuid:85736138-d9c1-42f5-8b7a-f2225866d21f"
    },
    {
      "title": "Issue Credential - JWT",
      "ctx": null,
      "suites": [],
      "tests": [],
      "root": false,
      "pending": false,
      "_retries": -1,
      "_beforeEach": [],
      "_beforeAll": [],
      "_afterEach": [],
      "_afterAll": [],
      "_timeout": 15000,
      "_slow": 75,
      "_bail": false,
      "_onlyTests": [],
      "_onlySuites": [],
      "delayed": false,
      "parent": "mid0oIVYC9MDK9BWRzSaQ",
      "summary": {},
      "matrix": true,
      "report": true,
      "implemented": [],
      "notImplemented": [
        "Danube Tech",
        "Digital Bazaar",
        "MATTR",
        "Mavennet",
        "mesur.io",
        "SecureKey",
        "Transmute"
      ],
      "rowLabel": "Test Name",
      "columnLabel": "Issuer",
      "reportData": []
    }
  ],
  "tests": [],
  "root": true,
  "pending": false,
  "_retries": -1,
  "_beforeEach": [],
  "_beforeAll": [],
  "_afterEach": [],
  "_afterAll": [],
  "_timeout": 15000,
  "_slow": 75,
  "_bail": false,
  "_onlyTests": [],
  "_onlySuites": [],
  "delayed": false,
  "_events": {
    "pre-require": [
      null,
      null
    ]
  },
  "_eventsCount": 1,
  "_testId": "urn:uuid:03dedd19-3da5-4c09-b3d0-04ec9de4cea1"
}
